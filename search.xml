<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[拖拽例子理解继承]]></title>
      <url>/posts/a440e2bf/</url>
      <content type="html"><![CDATA[<p>通过一个拖拽的例子理解继承<br><a id="more"></a></p>
<p><a href="https://codepen.io/Emma1075/full/yzweQM/" target="_blank" rel="external">演示地址</a></p>
<p>页面上有两个 div，给其设置为绝对定位<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: powderblue;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#box1</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: powderblue;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#box2</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: blanchedalmond;</div><div class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写两个构造函数，一个为 Drag，代表不限制范围的拖拽，另一个为 LimitDrag，限制拖拽范围。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Drag</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.box = <span class="built_in">document</span>.getElementById(id);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">this</span>.box.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      _this.dragDown(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Drag.prototype = &#123;</div><div class="line">    dragDown(e) &#123;</div><div class="line">        <span class="keyword">let</span> dx = e.clientX - <span class="keyword">this</span>.box.getBoundingClientRect().left;</div><div class="line">        <span class="keyword">let</span> dy = e.clientY - <span class="keyword">this</span>.box.getBoundingClientRect().top;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span>;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            _this.dragMove(e, dx, dy);</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            _this.dragUp();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    dragMove(e,dx,dy) &#123;</div><div class="line">        <span class="keyword">this</span>.box.style.left = e.clientX - dx + <span class="string">'px'</span>;</div><div class="line">        <span class="keyword">this</span>.box.style.top = e.clientY - dy + <span class="string">'px'</span>;</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    dragUp() &#123;</div><div class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在写 LimitDrag,继承自 Drag<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LimitDrag</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="comment">// 属性继承</span></div><div class="line">    Drag.call(<span class="keyword">this</span>, id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方法继承</span></div><div class="line">LimitDrag.prototype = <span class="built_in">Object</span>.create(Drag.prototype);</div><div class="line"></div><div class="line"><span class="comment">// 重新指向 constructor</span></div><div class="line">LimitDrag.prototype.constructor = LimitDrag;</div><div class="line"></div><div class="line">LimitDrag.prototype.dragMove = <span class="function"><span class="keyword">function</span> (<span class="params">e,dX,dY</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> box = <span class="keyword">this</span>.box;</div><div class="line">    <span class="keyword">let</span> l = e.clientX - dX;</div><div class="line">    <span class="keyword">let</span> t = e.clientY - dY;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> maxX = <span class="built_in">document</span>.documentElement.clientWidth -  box.getBoundingClientRect().width;</div><div class="line">    <span class="keyword">let</span> maxY = <span class="built_in">document</span>.documentElement.clientHeight - box.getBoundingClientRect().height;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (l &lt; <span class="number">0</span>) &#123;</div><div class="line">        l = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.clientX &gt; maxX) &#123;</div><div class="line">        l = maxX;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (t &lt; <span class="number">0</span>) &#123;</div><div class="line">        t = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.clientY &gt; maxY) &#123;</div><div class="line">        t = maxY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    box.style.left = l + <span class="string">'px'</span>;</div><div class="line">    box.style.top = t + <span class="string">'px'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴的笔试题：完成一个 Emitter]]></title>
      <url>/posts/d0e77298/</url>
      <content type="html"><![CDATA[<p>观察者模式在前端开发中非常常用，我们经常用的事件就是观察者模式的一种体现。它对我们解耦模块、开发基于消息的业务起着非常重要的作用。Node.js 原生自带 EventEmitter 模块，用原生 JS 实现这个模块的功能。</p>
<a id="more"></a>
<p>完成 EventEmitter 模块，它是一个类，它的实例具有以下几个方法：<code>on</code>、<code>emit</code>、<code>off</code>：</p>
<ul>
<li><code>on(eventName, func)</code>：监听 eventName 事件，事件触发的时候调用 func 函数。</li>
<li><code>emit(eventName, arg1, arg2, arg3...)</code>：触发 eventName 事件，并且把参数 arg1, arg2, arg3… 传给事件处理函数。</li>
<li><code>off(eventName, func)</code>：停止监听某个事件。</li>
</ul>
<p>测试用例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter()</div><div class="line"><span class="keyword">const</span> sayHi = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>)</div><div class="line"><span class="keyword">const</span> sayHi2 = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Good night, <span class="subst">$&#123;name&#125;</span>`</span>)</div><div class="line"></div><div class="line">emitter.on(<span class="string">'hi'</span>, sayHi)</div><div class="line">emitter.on(<span class="string">'hi'</span>, sayHi2)</div><div class="line">emitter.emit(<span class="string">'hi'</span>, <span class="string">'ScriptOJ'</span>)</div><div class="line"><span class="comment">// =&gt; Hello ScriptOJ</span></div><div class="line"><span class="comment">// =&gt; Good night, ScriptOJ</span></div><div class="line"></div><div class="line">emitter.off(<span class="string">'hi'</span>, sayHi)</div><div class="line">emitter.emit(<span class="string">'hi'</span>, <span class="string">'ScriptOJ'</span>)</div><div class="line"><span class="comment">// =&gt; Good night, ScriptOJ</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> emitter2 = <span class="keyword">new</span> EventEmitter()</div><div class="line">emitter2.on(<span class="string">'hi'</span>, (name, age) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`I am <span class="subst">$&#123;name&#125;</span>, and I am <span class="subst">$&#123;age&#125;</span> years old`</span>)</div><div class="line">&#125;)</div><div class="line">emitter2.emit(<span class="string">'hi'</span>, <span class="string">'Jerry'</span>, <span class="number">12</span>)</div><div class="line"><span class="comment">// =&gt; I am Jerry, and I am 12 years old</span></div></pre></td></tr></table></figure>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在构造函数中建立一个数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">this</span>.events = [];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	on(eventName, func) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.events.length) &#123;</div><div class="line"></div><div class="line">			<span class="comment">// flag = 0: 表示 events 里面没有出现过 eventName</span></div><div class="line">			<span class="keyword">let</span> flag = <span class="number">0</span>;</div><div class="line">			<span class="keyword">this</span>.events.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</div><div class="line">				<span class="keyword">if</span> (ele.name === eventName) &#123;</div><div class="line">					flag = <span class="number">1</span>;</div><div class="line">					<span class="keyword">if</span> (ele.fns.length) &#123;</div><div class="line">						ele.fns.push(func);</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						ele.fns = [func];</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (!flag) &#123;</div><div class="line">				<span class="keyword">this</span>.events.push(&#123;</div><div class="line">					<span class="attr">name</span>: eventName,</div><div class="line">					<span class="attr">fns</span>: [func]</div><div class="line">				&#125;)</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.events.push(&#123;</div><div class="line">				<span class="attr">name</span>: eventName,</div><div class="line">				<span class="attr">fns</span>: [func]</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	emit(eventName, ...args) &#123;</div><div class="line">		<span class="keyword">this</span>.events.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ele.name === eventName) &#123;</div><div class="line">				ele.fns.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn.call(<span class="keyword">this</span>, ...args))</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	off(eventName, func) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'off'</span>);</div><div class="line">		<span class="keyword">this</span>.events.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ele.name === eventName) &#123;</div><div class="line">				<span class="keyword">let</span> index = ele.fns.findIndex(<span class="function"><span class="params">fn</span> =&gt;</span> fn == func);</div><div class="line">				ele.fns.splice(index, <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>能实现效果，但代码冗余，遍历次数过多，不够优雅。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">this</span>.events = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	on(eventName, func) &#123;</div><div class="line">		<span class="keyword">let</span> fns = eventName <span class="keyword">in</span> <span class="keyword">this</span>.events ? <span class="keyword">this</span>.events[eventName] : [];</div><div class="line">		fns.push(func);</div><div class="line">		<span class="keyword">this</span>.events[eventName] = fns;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	emit(eventName, ...args) &#123;</div><div class="line">		<span class="keyword">this</span>.events[eventName].forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn.call(<span class="keyword">this</span>, ...args))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	off(eventName, func) &#123;</div><div class="line">		<span class="keyword">let</span> fns = <span class="keyword">this</span>.events[eventName];</div><div class="line">		<span class="keyword">let</span> i = fns.findIndex(<span class="function"><span class="params">fn</span> =&gt;</span> fn == func);</div><div class="line">		fns.splice(i, <span class="number">1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完善"><a href="#完善" class="headerlink" title="完善"></a>完善</h2><p>如果对没有注册的事件进行触发或删除，则会报错。因此，要多做一层 <code>isOn</code> 判断</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">this</span>.events = &#123;&#125;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	on(eventName, func) &#123;</div><div class="line">		<span class="keyword">let</span> isOn = eventName <span class="keyword">in</span> <span class="keyword">this</span>.events;</div><div class="line">		<span class="keyword">let</span> fns = isOn ? <span class="keyword">this</span>.events[eventName] : [];</div><div class="line">		fns.push(func);</div><div class="line">		<span class="keyword">this</span>.events[eventName] = fns;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	emit(eventName, ...args) &#123;</div><div class="line">		<span class="keyword">let</span> isOn = eventName <span class="keyword">in</span> <span class="keyword">this</span>.events;</div><div class="line">		<span class="keyword">if</span> (!isOn) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`Error: <span class="subst">$&#123;eventName&#125;</span> 事件未注册, 无法触发`</span>);</div><div class="line"></div><div class="line">		<span class="keyword">this</span>.events[eventName].forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn.call(<span class="keyword">this</span>, ...args))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	off(eventName, func) &#123;</div><div class="line">		<span class="keyword">let</span> isOn = eventName <span class="keyword">in</span> <span class="keyword">this</span>.events;</div><div class="line">		<span class="keyword">if</span> (!isOn) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`Error: <span class="subst">$&#123;eventName&#125;</span> 事件未注册，无法删除`</span>);</div><div class="line"></div><div class="line">		<span class="keyword">let</span> fns = <span class="keyword">this</span>.events[eventName];</div><div class="line">		<span class="keyword">let</span> i = fns.findIndex(<span class="function"><span class="params">fn</span> =&gt;</span> fn == func);</div><div class="line">		fns.splice(i, <span class="number">1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 基础]]></title>
      <url>/posts/e2f52f48/</url>
      <content type="html"><![CDATA[<p>JavaScript 的一些基础知识<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul>
<li>基本数据类型：undefined、null、boolean、number、string、symbol</li>
<li>引用数据类型：object、array、function</li>
</ul>
<h3 id="typeof运算符可得到的结果"><a href="#typeof运算符可得到的结果" class="headerlink" title="typeof运算符可得到的结果"></a><code>typeof</code>运算符可得到的结果</h3><ul>
<li>string</li>
<li>number</li>
<li>object</li>
<li>function</li>
<li>undefined</li>
<li>boolean</li>
</ul>
<h3 id="何时用-何时用"><a href="#何时用-何时用" class="headerlink" title="何时用 === 何时用 =="></a>何时用 <code>===</code> 何时用 <code>==</code></h3><p>当且仅当判断值是否为 <code>null</code> 或 <code>undefined</code>时,用 <code>==</code>， 其余时候都用 <code>===</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a == <span class="literal">null</span>) &#123;...&#125;</div><div class="line"></div><div class="line"><span class="comment">// 相当于</span></div><div class="line"><span class="keyword">if</span>(a === <span class="literal">null</span> || a === <span class="literal">undefined</span>) &#123;...&#125;</div></pre></td></tr></table></figure>
<h3 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h3><p>强制类型转换</p>
<ul>
<li>字符串拼接</li>
<li><code>==</code> 运算符</li>
<li>if 语句</li>
<li>逻辑运算</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp;&amp; <span class="number">0</span>) 	<span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">''</span> || <span class="string">'a'</span>) 	<span class="comment">// a</span></div></pre></td></tr></table></figure>
<h3 id="JS-内置对象"><a href="#JS-内置对象" class="headerlink" title="JS 内置对象"></a>JS 内置对象</h3><ul>
<li>数据封装类对象：Object、Array、Boolean、Number、String</li>
<li>其他对象：Function、Arguments、Math、Date、RegExp、Error</li>
<li>ES6新增对象：Symbol、Map、Set、Promises、Proxy、Reflect</li>
</ul>
<h3 id="如何编写高性能的-JavaScript"><a href="#如何编写高性能的-JavaScript" class="headerlink" title="如何编写高性能的 JavaScript"></a>如何编写高性能的 JavaScript</h3><ul>
<li>使用非阻塞方式下载 js 脚本</li>
<li>将多个 js 文件成组打包，减少请求数</li>
<li>将 js 文件放在页面底部，加快渲染页面</li>
<li>尽量使用局部变量来保存全局变量</li>
<li>尽量减少使用闭包</li>
<li>使用 window 对象属性方法时，省略 window</li>
<li>尽量减少对象成员嵌套</li>
<li>缓存 DOM 节点的访问，尽量减少对 DOM 的直接操作</li>
<li>最小化重绘(repaint)和回流(reflow)</li>
</ul>
<h3 id="如何最小化重绘-repaint-和回流-reflow-？"><a href="#如何最小化重绘-repaint-和回流-reflow-？" class="headerlink" title="如何最小化重绘(repaint)和回流(reflow)？"></a>如何最小化重绘(repaint)和回流(reflow)？</h3><p>回流：当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。</p>
<p>重绘：当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如<code>background-color</code>。则就叫称为重绘。</p>
<p>由此可知：回流一定会引起重绘，但重绘不一定会回流。</p>
<h4 id="最小化方法"><a href="#最小化方法" class="headerlink" title="最小化方法"></a>最小化方法</h4><ul>
<li>需要要对元素进行复杂的操作时，可以先隐藏(display:”none”)，操作完成后再显示</li>
<li>需要创建多个DOM节点时，使用DocumentFragment创建完后一次性的加入document</li>
<li>缓存Layout属性值，如：var left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流</li>
<li>尽量避免用table布局（table元素一旦触发回流就会导致table里所有的其它元素回流）</li>
<li>避免使用css表达式(expression)，因为每次调用都会重新计算值（包括加载页面）</li>
<li>批量修改元素样式：elem.className 和 elem.style.cssText 代替 elem.style.xxx</li>
</ul>
<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><h3 id="原型规则"><a href="#原型规则" class="headerlink" title="原型规则"></a>原型规则</h3><ol>
<li>所有的引用类型（Array， Object， Function），都具有对象特性（即： 可自由扩展属性）</li>
<li>所有的引用类型（Array， Object， Function），都有一个 <code>__proto__</code> 属性（隐式原型），属性值是一个普通的对象</li>
<li>所有的函数，都有一个 <code>prototype</code> 属性（显式原型），属性值是一个普通的对象</li>
<li>所有的引用类型（Array， Object， Function）, <code>__proto__</code> 属性值指向它的构造函数的 <code>prototype</code> 属性值</li>
<li>试图得到对象中的某个属性值时，如果对象中没有这个属性，就会到该对象的 <code>__proto__</code> (即该对象的构造函数的 <code>prototype</code>) 中去寻找</li>
</ol>
<h3 id="写一个原型链继承的例子"><a href="#写一个原型链继承的例子" class="headerlink" title="写一个原型链继承的例子"></a>写一个原型链继承的例子</h3><p>封装 dom 查询</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ele</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.ele = <span class="built_in">document</span>.querySelector(<span class="string">`#&#123;id&#125;`</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">Ele.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> ele = <span class="keyword">this</span>.ele;</div><div class="line">	<span class="keyword">if</span>(val) &#123;</div><div class="line">		ele.innerHTML = val;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> ele.innerHTML;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Ele.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> ele = <span class="keyword">this</span>.ele;</div><div class="line">	ele.addEventListener(type, fn);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myDiv = <span class="keyword">new</span> Ele(<span class="string">'mydiv'</span>);</div><div class="line">myDiv.html(<span class="string">'hello world'</span>).on(<span class="string">'click'</span>,() =&gt; &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'clicked'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="描述-new-一个对象的过程"><a href="#描述-new-一个对象的过程" class="headerlink" title="描述 new 一个对象的过程"></a>描述 new 一个对象的过程</h3><ol>
<li>创建一个对象</li>
<li>this 指向这个对象</li>
<li>执行代码，对 this 赋值</li>
<li>返回 this</li>
</ol>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul>
<li>范围： 一段 <code>script</code> 或一个函数</li>
<li>全局： 变量定义，函数声明</li>
<li>函数： (执行前拿出) 变量定义，函数声明， this， arguments</li>
</ul>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote>
<p>在定义时无法确认值，在执行时才能确认。</p>
</blockquote>
<p>this 的不同使用场景：</p>
<ol>
<li>作为构造函数执行</li>
<li>作为对象属性执行</li>
<li>作为普通函数执行</li>
<li>call，apply， bind</li>
</ol>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>实际开发中闭包的应用：</p>
<ul>
<li>闭包（函数）作为返回值</li>
<li>闭包（函数）作为参数传递</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数作为返回值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(a);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = F1();</div><div class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</div><div class="line">f1();	<span class="comment">// 100</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数作为参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(a);		<span class="comment">// 声明时的作用域</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">200</span>;	<span class="comment">// 执行时的作用域</span></div><div class="line">	fn();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = F1();</div><div class="line">F2(f1);		<span class="comment">// 100</span></div></pre></td></tr></table></figure>
<p>要点： 函数作用域在声明定义时确定，而非执行时。</p>
<h2 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h2><h3 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h3><p>同步会阻塞代码，而异步不会。<br>举例： alert 是同步，setTimeout 是异步</p>
<h3 id="使用异步的场景-需要等待"><a href="#使用异步的场景-需要等待" class="headerlink" title="使用异步的场景(需要等待)"></a>使用异步的场景(需要等待)</h3><ul>
<li>定时任务： <code>setInterval</code> <code>setTimeout</code></li>
<li>网络请求： ajax 请求，动态 img 加载</li>
<li>事件绑定</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</div><div class="line"><span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'loaded'</span>);</div><div class="line">&#125;</div><div class="line">img.src = <span class="string">'https://doc.react-china.org/react/img/logo.svg'</span>;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(img);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</div><div class="line"></div><div class="line"><span class="comment">// start</span></div><div class="line"><span class="comment">// end</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// loaded</span></div></pre></td></tr></table></figure>
<h1 id="JS-Web-API"><a href="#JS-Web-API" class="headerlink" title="JS-Web-API"></a>JS-Web-API</h1><p>JS-Web-API 要遵循 W3C 标准</p>
<p>常说的 JS （浏览器执行的JS）包含两部分：</p>
<ul>
<li>JS 基础知识 （ECMA262 标准）</li>
<li>JS-Web-API    （W3C 标准）</li>
</ul>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM-是哪种基本的数据结构？"><a href="#DOM-是哪种基本的数据结构？" class="headerlink" title="DOM 是哪种基本的数据结构？"></a>DOM 是哪种基本的数据结构？</h3><p>答案： 树</p>
<h3 id="DOM-节点操作"><a href="#DOM-节点操作" class="headerlink" title="DOM 节点操作"></a>DOM 节点操作</h3><p>可以这么理解 DOM： 浏览器把拿到的 HTML 代码，结构化为可被浏览器识别并且能被 JS 操作的模型。</p>
<h3 id="DOM-节点的-attr-和-property-的区别"><a href="#DOM-节点的-attr-和-property-的区别" class="headerlink" title="DOM 节点的 attr 和 property 的区别"></a>DOM 节点的 attr 和 property 的区别</h3><ul>
<li><p><code>attribute</code>：翻译为“特性”。<code>attribute</code>是HTML标签上的特性，它的值只能够是字符串；</p>
<ul>
<li><code>attribute</code> 就是 DOM 节点自带的属性，例如html中常用的<code>id</code>、<code>class</code>、<code>title</code> 、<code>align</code> 等</li>
<li>常用的 <code>attribute</code>，例如 <code>id</code>、<code>class</code>、<code>title</code> 等，已经被作为Property附加到DOM对象上，可以和Property一样取值和赋值。但是自定义的Attribute，就不会有这样的特殊优待。</li>
<li><code>attributes</code> 是属于 <code>property</code> 的一个子集，它保存了HTML标签上定义属性</li>
</ul>
</li>
<li><p><code>property</code>： 翻译为“属性”。<code>property</code>是DOM中的属性，是JavaScript里的对象；</p>
<ul>
<li>Property是这个DOM元素作为对象，其附加的内容，例如childNodes、firstChild等</li>
<li>property 只是 JS 对象属性的修改</li>
</ul>
</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="写一个通用的事件绑定函数"><a href="#写一个通用的事件绑定函数" class="headerlink" title="写一个通用的事件绑定函数"></a>写一个通用的事件绑定函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> eventUtil = &#123;</div><div class="line"> 	<span class="comment">// 添加事件</span></div><div class="line">	addEvent(ele, type, fn) =&gt; &#123;</div><div class="line">		<span class="keyword">if</span>(ele.addEventListener) &#123;</div><div class="line">			ele.addEventListener(type, fn, <span class="literal">false</span>)</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(ele.attachEvent) &#123;</div><div class="line">			ele.attachEvent(<span class="string">'on'</span> + type, fn)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ele[<span class="string">'on'</span> + type] = fn;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="comment">// 移除事件</span></div><div class="line">	removeEvent(ele, type, fn) =&gt; &#123;</div><div class="line">		<span class="keyword">if</span>(ele.removeEventListener) &#123;</div><div class="line">			ele.removeEventListener(type, fn, <span class="literal">false</span>)</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(ele.detachEvent) &#123;</div><div class="line">			ele.detachEvent(<span class="string">'on'</span> + type, fn)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ele[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	getEvent(event) =&gt; &#123;</div><div class="line">		<span class="keyword">return</span> event || <span class="built_in">window</span>.event;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	getTarget(event) =&gt; &#123;</div><div class="line">		<span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="comment">// 阻止事件冒泡</span></div><div class="line">	stopPropagation(event) =&gt; &#123;</div><div class="line">		<span class="keyword">if</span>(event.stopPropagation) &#123;</div><div class="line">			event.stopPropagation();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			event.cancelBubble = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="comment">// 阻止默认行为</span></div><div class="line">	preventDefault(event) =&gt; &#123;</div><div class="line">		<span class="keyword">if</span>(event.preventDefault) &#123;</div><div class="line">			event.preventDefault();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			event.returnValue = <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>写一个可实现事件代理的通用函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bindEvent = <span class="function">(<span class="params">ele, type, selector, fn</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">if</span>(fn == <span class="literal">null</span>) &#123;</div><div class="line">		fn = selector;</div><div class="line">		selector = <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	ele.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> target;</div><div class="line">		<span class="keyword">if</span>(selector) &#123;</div><div class="line">			target = e.target;</div><div class="line">			<span class="keyword">if</span>(target.matches(selector)) &#123;</div><div class="line">				fn.call(target, e)</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				fn(e)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件代理的好处： </p>
<ul>
<li>代码更简洁</li>
<li>减少浏览器内存占用</li>
</ul>
<h3 id="简述事件冒泡与事件捕获"><a href="#简述事件冒泡与事件捕获" class="headerlink" title="简述事件冒泡与事件捕获"></a>简述事件冒泡与事件捕获</h3><ul>
<li>事件捕获：指的是从<code>document</code>到触发事件的那个节点，即自上而下的去触发事件。</li>
<li>事件冒泡：指的是从触发事件的那个节点到<code>document</code>， 是自下而上的去触发事件。</li>
<li>绑定事件方法的第三个参数，就是控制事件触发顺序是否为事件捕获。true,事件捕获；false,事件冒泡。默认false,即事件冒泡。</li>
</ul>
<h2 id="Ajax与跨域"><a href="#Ajax与跨域" class="headerlink" title="Ajax与跨域"></a>Ajax与跨域</h2><h3 id="写一个原生的-ajax-请求"><a href="#写一个原生的-ajax-请求" class="headerlink" title="写一个原生的 ajax 请求"></a>写一个原生的 ajax 请求</h3><p>极简版</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ActiveObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = createXHR();</div><div class="line"></div><div class="line">xhr.open(<span class="string">'get'</span>, url, <span class="literal">false</span>);</div><div class="line"></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(xhr.readystate == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">		<span class="built_in">console</span>.log(xhr.responseText);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'error'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>豪华版（使用方式类似于jQuery）<br><a href="https://segmentfault.com/a/1190000007597494" target="_blank" rel="external">参考</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用</span></div><div class="line">ajax(&#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">""</span>, <span class="comment">//请求地址</span></div><div class="line">    type:<span class="string">'GET'</span>,   <span class="comment">//请求方式</span></div><div class="line">    data:&#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>,<span class="attr">age</span> :<span class="string">'23'</span>,<span class="attr">email</span>:<span class="string">'2372734044@qq.com'</span>&#125;, <span class="comment">//请求参数</span></div><div class="line">    dataType:<span class="string">"json"</span>,     <span class="comment">// 返回值类型的设定</span></div><div class="line">    <span class="keyword">async</span>:<span class="literal">false</span>,   <span class="comment">//是否异步</span></div><div class="line">    success:<span class="function"><span class="keyword">function</span> (<span class="params">response,xml</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(response);   <span class="comment">//   此处执行请求成功后的代码</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">fail</span>:<span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'状态码为'</span>+status);   <span class="comment">// 此处为执行成功后的代码</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">	opts = opts || &#123;&#125;;</div><div class="line">	</div><div class="line">	opts.type = (opts.type || <span class="string">'GET'</span>).toUpperCase();</div><div class="line">	opts.dataType = opts.dataType || <span class="string">'json'</span>;</div><div class="line">	</div><div class="line">	<span class="comment">// 默认为异步请求</span></div><div class="line">	opts.async = opts.async || <span class="literal">true</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> params = getParam(opts.data);</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> xhr;</div><div class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">		xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		xhr = <span class="keyword">new</span> ActiveObject(<span class="string">'Microsoft XMLHTTP'</span>)</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span>(xhr.readystate == <span class="number">4</span>) &#123;</div><div class="line">			<span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</div><div class="line">				opts.success &amp;&amp; opts.success(xhr.responseText);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			opts.fail &amp;&amp; opts.fail(xhr.status)</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(opts.type == <span class="string">'GET'</span>) &#123;</div><div class="line">		xhr.open(<span class="string">'GET'</span>, opts.url + <span class="string">'?'</span> + params, opts.async);</div><div class="line">		xhr.send(<span class="literal">null</span>);</div><div class="line">	</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opts.type == <span class="string">'POST'</span>) &#123;</div><div class="line">		xhr.open(<span class="string">'POST'</span>, opts.url, opts.async);</div><div class="line">		</div><div class="line">		<span class="comment">// POST请求设置请求头</span></div><div class="line">		xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</div><div class="line">        </div><div class="line">		xhr.send(params);</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParam</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> param = [];</div><div class="line">	<span class="keyword">for</span>(item <span class="keyword">in</span> data) &#123;</div><div class="line">		param.push(item + <span class="string">'='</span> + data[item])</div><div class="line">	&#125;</div><div class="line">	param.push(<span class="string">'t='</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</div><div class="line">	<span class="keyword">return</span> param.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="readystate属性"><a href="#readystate属性" class="headerlink" title="readystate属性"></a><code>readystate</code>属性</h4><ul>
<li>0 =&gt; 未初始化。 尚未调用 <code>open</code> 方法</li>
<li>1 =&gt; 启动。 已经调用 <code>open</code> 方法， 但尚未调用 <code>send</code> 方法</li>
<li>2 =&gt; 发送。 已经调用 <code>send</code> 方法， 但尚未接收到响应</li>
<li>3 =&gt; 接收。 已经接收到部分响应数据</li>
<li>4 =&gt; 完成。 已经接收到全部相应数据。</li>
</ul>
<h4 id="status-状态码"><a href="#status-状态码" class="headerlink" title="status 状态码"></a><code>status</code> 状态码</h4><ul>
<li>2XX =&gt; 表示成功处理请求。 如 200</li>
<li>3XX =&gt; 需要重定向。浏览器直接跳转。如 304 （未修改） 自从上次请求后，请求的网页未被修改过</li>
<li>4XX =&gt; 客户端请求错误。 如 404</li>
<li>5XX =&gt; 服务端错误<ul>
<li>500（服务器内部错误）  服务器遇到错误，无法完成请求。 </li>
<li>504（网关超时）  服务器作为网关或代理，未及时从上游服务器接收请求。 </li>
<li>505（HTTP 版本不受支持） 服务器不支持请求中所使用的 HTTP 协议版本。 </li>
</ul>
</li>
</ul>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>浏览器有同源策略，不允许 <code>ajax</code> 访问其他域接口。</p>
<p>同源策略： 同协议， 同端口， 同域名</p>
<p>所以的跨域请求都必须经过信息提供方的允许。</p>
<p>可以跨域的 3 个标签: <code>&lt;img&gt;</code>的src（获取图片），<code>&lt;link&gt;</code>的href（获取css），<code>&lt;script&gt;</code>的src（获取javascript）这三个都不符合同源策略，它们可以跨域获取数据.<br>JSONP就是利用<code>&lt;script&gt;</code>的src来实现跨域获取数据的。</p>
<h4 id="JSONP-跨域"><a href="#JSONP-跨域" class="headerlink" title="JSONP 跨域"></a>JSONP 跨域</h4><p>原理： 动态创建 <code>&lt;script&gt;</code> 标签，利用<code>&lt;script&gt;</code> 的 src 不受同源策略约束来跨域获取数据。</p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="cookie、localStorage、sessionStorage"><a href="#cookie、localStorage、sessionStorage" class="headerlink" title="cookie、localStorage、sessionStorage"></a>cookie、localStorage、sessionStorage</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul>
<li>本身用于客户端与服务端通信</li>
<li>存储在用户本地终端上的数据</li>
<li>使用 <code>document.cookie = ...</code> 来进行获取和修改</li>
<li>一般应用最典型的案列就是判断注册用户是否已经登过该网站</li>
</ul>
<p>缺点</p>
<ol>
<li>存储量小，只有 4kb</li>
<li>所有 http 请求都要带上，影响获取资源的效率</li>
<li>API 过于简单，需要封装才能使用</li>
</ol>
<h4 id="localStorage-与-sessionStorage"><a href="#localStorage-与-sessionStorage" class="headerlink" title="localStorage 与 sessionStorage"></a>localStorage 与 sessionStorage</h4><ul>
<li>HTML5 专门为存储设计的，最大容量 5M</li>
<li>API 简单易用<ul>
<li><code>localStorage.setItem(key, value)</code>, <code>localStorage.getItem(key)</code></li>
</ul>
</li>
</ul>
<p>localStorage 与 sessionStorage 区别</p>
<ul>
<li>sessionStorage —— 针对一个 session 的数据存储,当用户关闭浏览器窗口后，数据会被删除。</li>
<li>localStorage - 没有时间限制的数据存储,第二天、第二周或下一年之后，数据依然可用。</li>
</ul>
<h4 id="三者异同"><a href="#三者异同" class="headerlink" title="三者异同"></a>三者异同</h4><p>同：都是保存在浏览器端，且同源的。</p>
<p>异： </p>
<ol>
<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递；sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</li>
<li>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</li>
<li>存储大小限制也不同<ul>
<li>cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。</li>
<li>sessionStorage和localStorage可以达到5M或更大。</li>
</ul>
</li>
<li>数据有效期不同<ul>
<li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</li>
<li>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据</li>
<li>cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li>
</ul>
</li>
<li>作用域不同<ul>
<li>sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</li>
<li>localStorage 在所有同源窗口中都是共享的；</li>
<li>cookie也是在所有同源窗口中都是共享的。</li>
</ul>
</li>
</ol>
<h2 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h2><h3 id="从输入-url-到得到-html-的过程"><a href="#从输入-url-到得到-html-的过程" class="headerlink" title="从输入 url 到得到 html 的过程"></a>从输入 url 到得到 html 的过程</h3><h4 id="加载一个资源的过程"><a href="#加载一个资源的过程" class="headerlink" title="加载一个资源的过程"></a>加载一个资源的过程</h4><ol>
<li>浏览器根据 DNS 服务器得到域名的 IP 地址</li>
<li>向这个 IP 的机器发送 http 请求</li>
<li>服务器收到、处理并返回 http 请求</li>
<li>浏览器得到返回内容</li>
</ol>
<h4 id="浏览器渲染页面的过程"><a href="#浏览器渲染页面的过程" class="headerlink" title="浏览器渲染页面的过程"></a>浏览器渲染页面的过程</h4><ol>
<li>根据 html 结构生成 DOM tree</li>
<li>根据 css 生成 CSSOM </li>
<li>将 DOM 与 CSSOM 整合起来，得到 Render tree</li>
<li>根据 Render tree 开始渲染和展示</li>
<li>遇到 <code>&lt;script&gt;</code> 时， 会执行并阻塞渲染</li>
</ol>
<p>思考： 为什么要将 css 文件放在 <code>header</code> 中？<br>提高性能。提前渲染出 CSSOM。</p>
<h3 id="window-onload-与-DOMContendLoaded"><a href="#window-onload-与-DOMContendLoaded" class="headerlink" title="window.onload 与 DOMContendLoaded"></a>window.onload 与 DOMContendLoaded</h3><ul>
<li><code>window.onload</code> 要等页面的全部资源加载完才执行（包括图片与视频）</li>
<li><code>document.addEventListener(&#39;DOMContendLoaded&#39;, fn)</code> DOM 渲染完即可执行。（此时 图片和视频还未加载完 ）。 类似于 <code>jQuery</code> 中的 <code>$.ready()</code> 事件</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>多使用内存，缓存 或其他方法</li>
<li>减少 CPU 计算，减少网络请求</li>
</ul>
<h3 id="入手点"><a href="#入手点" class="headerlink" title="入手点"></a>入手点</h3><ul>
<li>加载页面与静态资源<ul>
<li>静态资源压缩合并</li>
<li>静态资源缓存</li>
<li>使用 CDN， 让资源加载更快</li>
<li>使用 SSR 后端渲染，让数据直接输出到 HTML 中</li>
</ul>
</li>
<li>页面渲染<ul>
<li>CSS 放前面， JS 放后面</li>
<li>图片懒加载 （下拉刷新）</li>
<li>减少 DOM 查询， 将查询结果缓存起来</li>
<li>减少 DOM 操作， 多个操作尽量合并在一起执行</li>
<li>事件节流</li>
<li>尽早执行操作（如 DOMContendLoaded）</li>
</ul>
</li>
</ul>
<h4 id="事件节流"><a href="#事件节流" class="headerlink" title="事件节流"></a>事件节流</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> processer = &#123;</div><div class="line">	<span class="attr">timeoutId</span>: <span class="literal">null</span>,</div><div class="line">	</div><div class="line">	<span class="comment">// 实际进行处理的方法</span></div><div class="line">	activeProcess: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 实际执行的代码</span></div><div class="line">	&#125;,</div><div class="line">	</div><div class="line">	<span class="comment">// 初始调用的方法</span></div><div class="line">	process: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		clearTimeout(timeoutId);</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> _self = <span class="keyword">this</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">this</span>.timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			_self.activeProcess();</div><div class="line">		&#125;, <span class="number">100</span>)</div><div class="line">		</div><div class="line">		<span class="comment">// timeoutId = setTimeout(() =&gt; activeProcess(), 100)</span></div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS作用域与上下文]]></title>
      <url>/posts/4a313e78/</url>
      <content type="html"><![CDATA[<p>作用域是指程序源代码中定义变量的区域，可分为静态作用域与动态作用域两种。静态作用域又名词法作用域，表明函数作用域在定义时被决定。与之相对的动态作用域，则表明函数作用域在调用时被决定。</p>
<a id="more"></a>
<h2 id="词法作用域与动态作用域"><a href="#词法作用域与动态作用域" class="headerlink" title="词法作用域与动态作用域"></a>词法作用域与动态作用域</h2><p><code>javascript</code> 采用的是词法作用域，即作用域在定义时被决定。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Jack'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// foo 函数内部无 name 变量，向上查找。</span></div><div class="line">	<span class="comment">// 此时 foo 函数作用域已在定义时确定（ name 的值为 jack）</span></div><div class="line">	<span class="built_in">console</span>.log(name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// bar 函数内部定义变量 name，值为 Bob</span></div><div class="line">	<span class="keyword">var</span> name = <span class="string">'Bob'</span>;</div><div class="line">	<span class="comment">// 调用 foo 函数。foo 函数的作用域在定义时被决定。</span></div><div class="line">	<span class="comment">// 即 name 值已被定义好（'Jack'), 跟何时何地调用无关。</span></div><div class="line">	foo();  <span class="comment">// 得到 'jack'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">bar(); <span class="comment">// 得到 'jack'</span></div></pre></td></tr></table></figure>
<p>例子二</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(a);		<span class="comment">// a 的值为100， 在定义时被决定</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fn1 = fn();</div><div class="line"><span class="keyword">var</span> a = <span class="number">200</span>;</div><div class="line">fn1();		<span class="comment">// 100. 函数作用域在定义时被决定而不是执行时决定</span></div></pre></td></tr></table></figure>
<p>例子三</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(a);		<span class="comment">// a 的值为100， 在定义时被决定</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fn1 = fn();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">f</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">200</span>;</div><div class="line">	f();	<span class="comment">// 同样与执行时无关</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">fn2(fn1);	<span class="comment">// 100</span></div></pre></td></tr></table></figure>
<h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p> JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。</p>
<p> JavaScript 的可执行代码分为三种类型： 全局代码， 函数代码 和 eval 代码。当J avaScript 执行一段可执行代码时， 会创建“执行上下文”。 为了管理被创建的“执行上下文”， JavaScript 引擎创建了“执行上下文栈”（ECS）。</p>
<p>执行上下文栈：后进先出。可以用<code>array</code>模拟: <code>ECStack = [];</code></p>
<p>当执行一个函数的时候， 就会创建一个执行上下文，并且压入(用<code>array.push()</code> 模拟)执行上下文栈。当函数执行完毕的时候，就会从栈中弹出（用<code>array.pop()</code> 模拟）。</p>
<p>从执行上下文栈的角度分析以下两段代码的异同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> scope;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> f();</div><div class="line">&#125;</div><div class="line">checkScope();</div><div class="line"></div><div class="line"><span class="comment">// 模拟执行上下文栈</span></div><div class="line">ECStack.push( &lt;checkScope&gt; functionContext);</div><div class="line">ECStack.push( &lt;f&gt; functionContext);</div><div class="line">ECStack.pop();</div><div class="line">ECStack.pop();</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkScope</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> scope;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> f;</div><div class="line">&#125;</div><div class="line">checkScope()();</div><div class="line"></div><div class="line"><span class="comment">// 模拟执行上下文栈</span></div><div class="line"><span class="comment">// 第一个括号表示执行 checkScope() 函数</span></div><div class="line">ECStack.push( &lt;checkScope&gt; functionContext);</div><div class="line">ECStack.pop(); // 得到 f 函数。</div><div class="line"></div><div class="line">// 第二个括号表示执行 f() 函数</div><div class="line">ECStack.push( &lt;f&gt; functionContext);</div><div class="line">ECStack.pop();</div></pre></td></tr></table></figure>
<h3 id="变量对象（VO）"><a href="#变量对象（VO）" class="headerlink" title="变量对象（VO）"></a>变量对象（VO）</h3><p>当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p>
<p>对于每个执行上下文，都有三个重要属性：</p>
<ol>
<li><strong>变量对象</strong>(Variable object，VO)</li>
<li>作用域链(Scope chain)</li>
<li>this</li>
</ol>
<p>变量对象是与执行上下文相关的<strong>数据作用域</strong>，存储了在上下文中定义的变量和函数声明。</p>
<p>执行上下文下又分全局上下文和 函数上下文。二者的变量对象又各有不同。</p>
<h4 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h4><p>全局上下文中的变量对象 就是 <strong>全局对象</strong>。</p>
<blockquote>
<p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。</p>
</blockquote>
<h4 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h4><p>函数上下文中，用 <strong>活动对象(AO)</strong> 来表示变量对象。</p>
<p>AO 是在进入函数上下文时被创建的，它通过函数的 <code>arguments</code> 属性初始化。</p>
<h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><h5 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h5><p>进入执行上下文时，代码还未执行。变量对象可分为以下三种</p>
<ol>
<li>函数所有的形参<ul>
<li>由名称和对应值组成的一个变量对象的属性</li>
<li>无实参，属性值设为 undefined</li>
</ul>
</li>
<li>函数声明<ul>
<li>由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建</li>
<li>如果变量对象已经存在相同名称的属性，则完全替换这个属性。（函数声明可覆盖同名变量声明或此前声明的函数声明）</li>
</ul>
</li>
<li>变量声明<ul>
<li>由名称和对应值（undefined）组成一个变量对象的属性被创建；</li>
<li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li>
</ul>
</li>
</ol>
<p>show code</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a1,a2</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	b = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line">foo(<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>进入执行上下文后，此时的 AO 为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">AO = &#123;</div><div class="line">	<span class="comment">// 函数形参</span></div><div class="line">	<span class="built_in">arguments</span>: &#123;</div><div class="line">		<span class="number">0</span>: <span class="number">1</span>,</div><div class="line">		<span class="number">1</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">length</span>: <span class="number">2</span></div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// 函数实参</span></div><div class="line">	a1: <span class="number">1</span>,</div><div class="line">	<span class="attr">a2</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">b</span>: <span class="literal">undefined</span>,		<span class="comment">// 变量声明</span></div><div class="line">	c: reference to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;,	<span class="comment">// 函数声明</span></div><div class="line">	d: <span class="literal">undefined</span>		<span class="comment">// 变量声明</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h5><p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">AO = &#123;</div><div class="line">	<span class="attr">arguments</span>: &#123;</div><div class="line">		<span class="number">0</span>: <span class="number">1</span>,</div><div class="line">		<span class="number">1</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">length</span>: <span class="number">2</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">a1</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">a2</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">b</span>: <span class="number">3</span>,	</div><div class="line">	<span class="attr">c</span>: reference to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;,	<span class="comment">// 函数声明</span></div><div class="line">	d: reference to FunctionExpression <span class="string">'d'</span> <span class="comment">// 变量声明</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote>
<p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>
</blockquote>
<p>下面以一个函数的创建和激活两个时期，来讲解作用域链是如何创建和变化的。</p>
<h4 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h4><p>函数的作用域在其定义时就已经被决定了。原因是： 函数有一个内部属性[[scope]]，当函数创建的时候，就会保存所有父变量到其中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="number">4</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">middle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> c = <span class="number">3</span>;</div><div class="line">			<span class="built_in">console</span>.log(a + b + c + d);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> inner();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> middle();</div><div class="line">&#125;</div><div class="line">outer();</div></pre></td></tr></table></figure>
<p>函数创建时，各自的 [[scope]] 为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">outer.[[scope]] = [</div><div class="line">	globalContext.VO</div><div class="line">];</div><div class="line"></div><div class="line">middle.[[scope]] = [</div><div class="line">	outerContext.AO,</div><div class="line">	globalContext.VO</div><div class="line">];</div><div class="line"></div><div class="line">inner.[[scope]] = [</div><div class="line">	middleContext.AO,</div><div class="line">	outerContext.AO,</div><div class="line">	globalContext.VO</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h4><p>函数激活时， 进入函数上下文。创建 VO/AO 后， 就会将活动对象添加都作用链的前端。此时执行上下文的作用域链，被命名为 <code>Scope</code></p>
<p><code>Scope = [AO].conacat([[scope]])</code></p>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="external">JavaScript深入之词法作用域和动态作用域 </a>； </li>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="external">JavaScript深入之执行上下文栈</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 深入理解系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈原型与原型链]]></title>
      <url>/posts/e8f7340e/</url>
      <content type="html"><![CDATA[<p>简要讲讲原型与原型链。</p>
<a id="more"></a>
<h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>每个对象都有其隐式原型<code>__proto__</code>, 隐式原型指向该对象的构造函数的显式原型 <code>prototype</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="comment">// 对象 p 的构造函数 Person 的显式原型为 Person.prototype,它（即Person.prototype，下述用 a 指代）也是一个对象</span></div><div class="line"><span class="built_in">console</span>.log(p.__proto__ === Person.prototype);	<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 因此，a 也有隐式原型，其指向 a 的构造函数的显式原型 =&gt; Object.prototype</span></div><div class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototyoe); 	<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 同理， Object.prototype 也是一个对象（下述用 b 指代），b 也有隐式原型</span></div><div class="line"><span class="comment">// b.__proto__ 指向 null （最顶层）</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>); 	<span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="instanceof-方法"><a href="#instanceof-方法" class="headerlink" title="instanceof() 方法"></a><code>instanceof()</code> 方法</h3><p><code>instanceof()</code>方法： 用来判断引用类型属于哪个构造函数</p>
<p>由上述可得：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">P <span class="keyword">instanceof</span> Person;	<span class="comment">// true</span></div><div class="line">Person <span class="keyword">instanceof</span> <span class="built_in">Function</span>;	<span class="comment">// true</span></div><div class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;	<span class="comment">// true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;	<span class="comment">// true</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 原型 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tab 选项卡的插件封装]]></title>
      <url>/posts/791e2dfc/</url>
      <content type="html"><![CDATA[<p>一个 jQuery 插件封装。</p>
<a id="more"></a>
<p><a href="http://www.sugar1075.online/js-plugin-learning/tab/tab">demo演示地址</a><br><a href="https://github.com/Emma1075/js-plugin-learning" target="_blank" rel="external">demo代码地址</a></p>
<p>自定义参数放在 <code>data-config</code> 中。</p>
<ul>
<li><code>traggerType</code>: 鼠标触发类型</li>
<li><code>effect</code>: 内容切换效果</li>
<li><code>invoke</code>: 默认展示第几个 tab-content</li>
<li><code>auto</code>: 是否自动切换</li>
</ul>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.js-tab'</span>).tab()</div></pre></td></tr></table></figure>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><h4 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h4><p>将自定义参数写在元素的 <code>data-config</code> 中， 为 Tab 定义默认参数 <code>this.DEFAULT</code> 与原型方法 <code>this.getConfig()</code>。</p>
<p>通过 <code>$.extend()</code> 方法得到最终参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.config = $.extend(<span class="keyword">this</span>.DEFAULT, <span class="keyword">this</span>.getConfig() || &#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 原型上的 getConfig 方法</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> config = <span class="keyword">this</span>.tab.attr(<span class="string">'data-config'</span>);</div><div class="line">	<span class="keyword">if</span> (config &amp;&amp; config != <span class="string">''</span>) &#123;</div><div class="line">		<span class="keyword">return</span> $.parseJSON(config);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型上的 _init 方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> _this = <span class="keyword">this</span>,</div><div class="line">		config = <span class="keyword">this</span>.config;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (config) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// 切换效果的实现</span></div><div class="line">		<span class="keyword">if</span> (config.triggerType == <span class="string">'click'</span>) &#123;</div><div class="line">			_this.tabItems.bind(config.triggerType, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				_this.invoke($(<span class="keyword">this</span>));</div><div class="line">			&#125;) </div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			_this.tabItems.bind(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				_this.invoke($(<span class="keyword">this</span>));	</div><div class="line">			&#125;)		</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">// 自动播放的实现</span></div><div class="line">		<span class="keyword">if</span> (config.auto) &#123;</div><div class="line">			_this.autoPlay(config.auto);</div><div class="line"></div><div class="line">			<span class="comment">// 如果鼠标在 tab 上，取消自动播放</span></div><div class="line">			_this.tab.hover(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">				<span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">			&#125;, () =&gt; &#123;</div><div class="line">				<span class="keyword">this</span>.autoPlay(config.auto);</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 设置默认显示第几个tab</span></div><div class="line">		<span class="keyword">if</span> (config.invoke != <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">let</span> currentTab = _this.tabItems.eq(config.invoke - <span class="number">1</span>);</div><div class="line">			_this.invoke(currentTab);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="切换状态"><a href="#切换状态" class="headerlink" title="切换状态"></a>切换状态</h4><p>先获取当前 tab 的 index 值，通过增加移除 <code>active</code> 样式来控制显示。<br>注意自定义参数 <code>config.effect</code> 不同切换效果的变化。</p>
<p><code>this.loop</code> 用于保存当前 <code>active</code> 的选项索引，在自动播放时会用到。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型上的 invoke 方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">currentTab</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> index = currentTab.index(),</div><div class="line">		effect = <span class="keyword">this</span>.config.effect;</div><div class="line">	<span class="keyword">this</span>.loop = index;</div><div class="line">	<span class="keyword">this</span>.tabItems.removeClass(<span class="string">'active'</span>).eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">	<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>).eq(index).addClass(<span class="string">'active'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (effect === <span class="string">'fade'</span>) &#123;</div><div class="line">		<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>);</div><div class="line">		<span class="keyword">this</span>.tabContentItems.fadeOut().eq(index).fadeIn();</div><div class="line">		<span class="keyword">this</span>.tabContentItems.eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>).eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h4><p>通过 <code>setInterval()</code> 方法，实现自动播放。但注意一点，当鼠标在 tab 内时，停止自动播放，保持当前选项卡状态不变。（详见 <code>_init()</code> 方法）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原型上的 autoPlay 方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">time</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> _this = <span class="keyword">this</span>,</div><div class="line">		config = <span class="keyword">this</span>.config;</div><div class="line">		tabItems = <span class="keyword">this</span>.tabItems,</div><div class="line">		length = tabItems.length;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.timer = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		_this.loop++;</div><div class="line">		<span class="keyword">if</span> (_this.loop &gt;= length) &#123;</div><div class="line">			_this.loop = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		tabItems.eq(_this.loop).trigger(config.triggerType);</div><div class="line">	&#125;, time)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="封装为-jQuery-方法"><a href="#封装为-jQuery-方法" class="headerlink" title="封装为 jQuery 方法"></a>封装为 jQuery 方法</h4><p>通过 <code>$.fn.extend()</code> 进行封装。最后将 <code>this</code> return 出去，方便 jQuery 的链式调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.fn.extend(&#123;</div><div class="line">	<span class="attr">tab</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">new</span> Tab($(<span class="keyword">this</span>));</div><div class="line">		&#125;);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="一些bug"><a href="#一些bug" class="headerlink" title="一些bug"></a>一些bug</h4><ol>
<li>当效果为 <code>fade</code> 时，注意改变 <code>active</code>样式<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原写法</span></div><div class="line"><span class="keyword">if</span> (effect === <span class="string">'fade'</span>) &#123;</div><div class="line">	<span class="keyword">this</span>.tabContentItems.fadeOut().eq(index).fadeIn();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>).eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 修复后</span></div><div class="line"><span class="keyword">if</span> (effect === <span class="string">'fade'</span>) &#123;</div><div class="line">	<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>);</div><div class="line">	<span class="keyword">this</span>.tabContentItems.fadeOut().eq(index).fadeIn();</div><div class="line">	<span class="keyword">this</span>.tabContentItems.eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">this</span>.tabContentItems.removeClass(<span class="string">'active'</span>).eq(index).addClass(<span class="string">'active'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果不这样处理的话，一次遍循环 content 会有闪烁bug。</p>
<ol>
<li>自动播放bug<br>我们默认当鼠标移到 tab 区域时，停止自动播放（清除计时器），显示当前 content 内容，直到鼠标移出 tab 区域再重新进行自动播放。代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果鼠标在 tab 上，取消自动播放</span></div><div class="line"><span class="keyword">if</span> (config.auto) &#123;</div><div class="line">	_this.autoPlay(config.auto);</div><div class="line"></div><div class="line">	<span class="comment">// 如果鼠标在 tab 上，取消自动播放</span></div><div class="line">	_this.tab.hover(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">	&#125;, () =&gt; &#123;</div><div class="line">		<span class="keyword">this</span>.autoPlay(config.auto);</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里产生的 bug 为，如果 <code>config.triggerType</code> 为 <code>mouseover</code> 且 <code>config.auto != false</code> ,自动播放就会有bug。所以修复为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自动播放的实现</span></div><div class="line"><span class="keyword">if</span> (config.auto) &#123;</div><div class="line">	_this.autoPlay(config.auto);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (config.triggerType == <span class="string">'click'</span>) &#123;</div><div class="line">		<span class="comment">// 如果鼠标在 tab 上，取消自动播放</span></div><div class="line">		_this.tab.hover(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">			<span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">		&#125;, () =&gt; &#123;</div><div class="line">			<span class="keyword">this</span>.autoPlay(config.auto);</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>样式技巧</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.tab-wrap					// 不设 border</div><div class="line"></div><div class="line">	.tab-nav					// 不设 border</div><div class="line">		.tab-nav-item					// 仅设置 border-bottom </div><div class="line">		.tab-nav-item.active 	// 设置 border, 但 border-bottom 为 none</div><div class="line">		// ...</div><div class="line"></div><div class="line">	.tab-content 				// 设置 border,但 border-top 为 none</div><div class="line">		.tab-content-item</div><div class="line">		// ...</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js-project </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片懒加载]]></title>
      <url>/posts/f0e261b6/</url>
      <content type="html"><![CDATA[<p>懒加载：Web 图片的懒加载就是通过读取img元素，然后获得img元素的<code>data-src</code>（也可以约定为其他属性名）属性的值，并赋予img的src，从而实现动态加载图片的机制。</p>
<a id="more"></a>
<h2 id="为何要实现懒加载"><a href="#为何要实现懒加载" class="headerlink" title="为何要实现懒加载"></a>为何要实现懒加载</h2><p>对页面加载速度影响最大的就是图片，一张普通的图片可以达到几M的大小，而代码也许就只有几十KB。</p>
<p>当页面图片很多时，页面的加载速度缓慢，所以，对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内<strong>未出现在可视区域内</strong>的图片先不做加载， 等到<strong>滚动</strong>到可视区域后再去加载。这样子对于页面加载性能上会有很大的提升，也提高了用户体验。</p>
<h2 id="懒加载实现关键"><a href="#懒加载实现关键" class="headerlink" title="懒加载实现关键"></a>懒加载实现关键</h2><p>其实就是上述文字两个加粗的地方：可视区域 与 滚动。</p>
<ol>
<li>通过 <code>getBoundingClientRect()</code> 方法判断图片是否在可视区域内，如果在，加载图片，否则不加载。<ul>
<li><code>box.getBoundingClientRect().top</code>          元素上边距离页面上边的距离</li>
<li><code>box.getBoundingClientRect().right</code>        元素右边距离页面左边的距离</li>
<li><code>box.getBoundingClientRect().bottom</code>       元素下边距离页面上边的距离</li>
<li><code>box.getBoundingClientRect().left</code>         元素左边距离页面左边的离    </li>
</ul>
</li>
<li>添加页面滚动监听事件</li>
</ol>
<h2 id="如何加载"><a href="#如何加载" class="headerlink" title="如何加载"></a>如何加载</h2><h3 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h3><p><code>img</code> 元素在初始化的时候不要设置src属性，因为即使设置 <code>src=&#39;&#39;</code> 浏览器也会尝试加载图片。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"lazyload"</span> <span class="attr">data-src</span>=<span class="string">"img/1.jpg"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h3><h4 id="是否在视图内的判断"><a href="#是否在视图内的判断" class="headerlink" title="是否在视图内的判断"></a>是否在视图内的判断</h4><p>一般浏览器支持 <code>window.innerHeight</code>, IE浏览器 <code>document.documentElement.clientHeight</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inView</span>(<span class="params">ele</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> coords = ele.getBoundingClientRect(),</div><div class="line">		clientH = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">	<span class="keyword">return</span> (coords.top &gt;=<span class="number">0</span> &amp;&amp; coords.left &gt;=<span class="number">0</span> ) &amp;&amp; coords.top &lt; (clientH + offset);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展： <a href="https://i.jakeyu.top/2016/09/04/scrollTop-offsetTop-scrollLeft-offsetLeft/" target="_blank" rel="external">了解各种高度</a></p>
<h4 id="理解函数节流与函数去抖"><a href="#理解函数节流与函数去抖" class="headerlink" title="理解函数节流与函数去抖"></a>理解函数节流与函数去抖</h4><ul>
<li>函数去抖（Debounce）：一部电梯停在某一个楼层，当有一个人进来后，20秒后自动关门，这20秒的等待期间，又一个人按了电梯进来，这20秒又重新计算，直到电梯关门那一刻才算是响应了事件。</li>
<li>函数节流（throttle）：好比一台自动的饮料机，按拿铁按钮，在出饮料的过程中，不管按多少这个按钮，都不会连续出饮料，中间按钮的响应会被忽略，必须要等这一杯的容量全部出完之后，再按拿铁按钮才会出下一杯。</li>
</ul>
<p>如果直接将函数绑定在scroll事件上，当页面滚动时，函数会被高频触发，这非常影响浏览器的性能。</p>
<p>我想实现限制触发频率，来优化性能。</p>
<p>节流函数：只允许一个函数在N秒内执行一次。下面是一个简单的节流函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay, time</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> timeout,</div><div class="line">        startTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</div><div class="line">            args = <span class="built_in">arguments</span>,</div><div class="line">            curTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">        clearTimeout(timeout);</div><div class="line">        <span class="comment">// 如果达到了规定的触发时间间隔，触发 handler</span></div><div class="line">        <span class="keyword">if</span> (curTime - startTime &gt;= time) &#123;</div><div class="line">            fn.apply(context, args);</div><div class="line">            startTime = curTime;</div><div class="line">            <span class="comment">// 没达到触发间隔，重新设定定时器</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            timeout = setTimeout(fn, delay);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 实际想绑定在 scroll 事件上的 handler</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span>(<span class="params">event</span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 采用了节流函数</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,throttle(lazyload,<span class="number">500</span>,<span class="number">1000</span>));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[array-数组方法(3)]]></title>
      <url>/posts/68593973/</url>
      <content type="html"><![CDATA[<p>网站给出了一个inventors数组，包含了名、姓、出生日期和死亡日期；以及people数组，包含一组人名，名和姓中间以逗号分隔。在此基础上完成以下练习。</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> inventors = [</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Albert'</span>, <span class="attr">last</span>: <span class="string">'Einstein'</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Isaac'</span>, <span class="attr">last</span>: <span class="string">'Newton'</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Galileo'</span>, <span class="attr">last</span>: <span class="string">'Galilei'</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Marie'</span>, <span class="attr">last</span>: <span class="string">'Curie'</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Johannes'</span>, <span class="attr">last</span>: <span class="string">'Kepler'</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Nicolaus'</span>, <span class="attr">last</span>: <span class="string">'Copernicus'</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Max'</span>, <span class="attr">last</span>: <span class="string">'Planck'</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Katherine'</span>, <span class="attr">last</span>: <span class="string">'Blodgett'</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Ada'</span>, <span class="attr">last</span>: <span class="string">'Lovelace'</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Sarah E.'</span>, <span class="attr">last</span>: <span class="string">'Goode'</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Lise'</span>, <span class="attr">last</span>: <span class="string">'Meitner'</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</div><div class="line">      &#123; <span class="attr">first</span>: <span class="string">'Hanna'</span>, <span class="attr">last</span>: <span class="string">'Hammarström'</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h3 id="筛选出出生在16世纪（1500-1599年）的发明家"><a href="#筛选出出生在16世纪（1500-1599年）的发明家" class="headerlink" title="筛选出出生在16世纪（1500-1599年）的发明家"></a>筛选出出生在16世纪（1500-1599年）的发明家</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> filterBirth = inventors.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (ele.year &gt;= <span class="number">1500</span> &amp;&amp; ele.year &lt;= <span class="number">1599</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// es6</span></div><div class="line"><span class="comment">// 换行写，加 return 和 &#123;&#125;</span></div><div class="line"><span class="keyword">const</span> filterBirth = inventors.filter(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (ele.year &gt;= <span class="number">1500</span> &amp;&amp; ele.year &lt;= <span class="number">1599</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 不换行，适合单条语句</span></div><div class="line"><span class="keyword">const</span> filterBirth = inventors.filter(<span class="function"><span class="params">ele</span> =&gt;</span> (ele.year &gt;= <span class="number">1500</span> &amp;&amp; ele.year &lt;= <span class="number">1599</span>));</div></pre></td></tr></table></figure>
<h3 id="列出发明家的名和姓的数组"><a href="#列出发明家的名和姓的数组" class="headerlink" title="列出发明家的名和姓的数组"></a>列出发明家的名和姓的数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getNamesArr = inventors.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> ele.first + <span class="string">' '</span> + ele.last;</div><div class="line">&#125;);</div><div class="line">    </div><div class="line"><span class="comment">// es6</span></div><div class="line"><span class="keyword">const</span> getNamesArr = inventors.map(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;ele.first&#125;</span> <span class="subst">$&#123;ele.last&#125;</span>`</span>);</div></pre></td></tr></table></figure>
<h3 id="根据发明家的出生日期，按照从大到小的顺序进行排序"><a href="#根据发明家的出生日期，按照从大到小的顺序进行排序" class="headerlink" title="根据发明家的出生日期，按照从大到小的顺序进行排序"></a>根据发明家的出生日期，按照从大到小的顺序进行排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sortByBirth = inventors.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> b.year - a.year;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> sortByBirth = inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> (b.year - a.year));</div></pre></td></tr></table></figure>
<h3 id="所有的发明家一共活了多少岁"><a href="#所有的发明家一共活了多少岁" class="headerlink" title="所有的发明家一共活了多少岁"></a>所有的发明家一共活了多少岁</h3><p>array.reduce()方法的简单应用 —— 求和。以下两种方法均可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> pre + cur;</div><div class="line">&#125;);   <span class="comment">// 10</span></div><div class="line">a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, ele</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> sum + ele;</div><div class="line">&#125;, <span class="number">0</span>) <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p><code>reduce()</code> 方法的第二个参数为初始值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> countDates = inventors.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, ele</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> sum + (ele.passed - ele.year);</div><div class="line">&#125;, <span class="number">0</span>) </div><div class="line"></div><div class="line"><span class="keyword">const</span> countDates = inventors.reduce(<span class="function">(<span class="params">sum, ele</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">return</span> sum + (ele.passed - ele.year);</div><div class="line">&#125;,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="按照发明家的年龄大小排序"><a href="#按照发明家的年龄大小排序" class="headerlink" title="按照发明家的年龄大小排序"></a>按照发明家的年龄大小排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sortByAge = inventors.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (a.passed - a.year) - (b.passed - b.year);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css3全局变量的应用]]></title>
      <url>/posts/773fb769/</url>
      <content type="html"><![CDATA[<p>css3 中，可以设置样式变量，在文档中多处使用，大大的提高了效率。不过目前其不支持 ie 和 edge 浏览器。</p>
<a id="more"></a>
<p><a href="https://github.com/Emma1075/javascript30-challenge/tree/master/03_css-variables" target="_blank" rel="external">项目地址</a>;  <a href="http://www.sugar1075.online/javascript30-challenge/03_css-variables/">预览效果</a></p>
<blockquote>
<p>知识点： css3变量; <code>dataset</code>; <code>:root</code>伪元素;<code>setProperty</code>方法</p>
</blockquote>
<h2 id="css变量的定义与使用"><a href="#css变量的定义与使用" class="headerlink" title="css变量的定义与使用"></a>css变量的定义与使用</h2><p>通过<code>--xxx</code> 定义， 通过 <code>var(--xxx)</code>使用.</p>
<p>如果要将其作为<strong>全局变量</strong>使用，通常使用<code>:root</code>伪元素。</p>
<ul>
<li>这个伪元素匹配的是文档的根元素，也就是 <code>&lt;html&gt;</code> 标签。</li>
<li>所以常用于声明全局的 CSS 变量</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span>&#123;</div><div class="line">	<span class="attribute">--myColor</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">--mySpacing</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">	<span class="attribute">padding</span>: <span class="built_in">var</span>(--mySpacing);</div><div class="line">	<span class="attribute">border-color</span>: <span class="built_in">var</span>(--myColor)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="data-xxx"><a href="#data-xxx" class="headerlink" title="data-xxx"></a>data-xxx</h2><p>js交互：通过 <code>this.dataset.xxx</code> 可以取到。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>用到了 <code>change</code> 和 <code>mousemove</code> 两个事件。</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h3><p>用 JavaScript 和 CSS3 实现拖动滑块时，实时调整图片的内边距、模糊度、背景颜色，同时标题中 JS 两字的颜色也随图片背景颜色而变化。</p>
<h3 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h3><p>html部分</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"spacing"</span>&gt;</span>Spacing:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"spacing"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"spacing"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">data-sizing</span>=<span class="string">"px"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"blur"</span>&gt;</span>Blur:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"blur"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"blur"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"25"</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">data-sizing</span>=<span class="string">"px"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"base"</span>&gt;</span>Base Color<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"base"</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"base"</span> <span class="attr">value</span>=<span class="string">"#ffc600"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://source.unsplash.com/7bwQXzbF6KE/800x500"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>样式部分</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">:root</span> &#123;</div><div class="line">  <span class="attribute">--spacing</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">--base</span>: <span class="number">#177bbb</span>;</div><div class="line">  <span class="attribute">--blur</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</div><div class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(var(--blur));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JS 部分</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.controls input'</span>);</div><div class="line">  <span class="built_in">console</span>.log(inputs);</div><div class="line">  inputs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    item.addEventListener(<span class="string">'change'</span>, update);</div><div class="line">    item.addEventListener(<span class="string">'mousemove'</span>, update);</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">// 单位的处理，value无单位，用data-sizing来保存单位。</span></div><div class="line">    <span class="keyword">const</span> px = <span class="keyword">this</span>.dataset.sizing || <span class="string">''</span>;</div><div class="line">    <span class="comment">// 取到文档根元素</span></div><div class="line">    <span class="keyword">let</span> doc = <span class="built_in">document</span>.documentElement;</div><div class="line">    <span class="comment">// 设置文档中样式全局变量</span></div><div class="line">    doc.style.setProperty(<span class="string">`--<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>, <span class="keyword">this</span>.value + px);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 项目练习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> css3 </tag>
            
            <tag> js-project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arithmetic]]></title>
      <url>/posts/6ef8bab9/</url>
      <content type="html"><![CDATA[<p>记录一些用 JS 实现算法题目。算法方面包括栈、队列、二叉树等，此外还有对数组方法与字符串方法的灵活运用。</p>
<a id="more"></a>
<blockquote>
<p>题目来源：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="external">牛客网-剑指offer</a>；<a href="coderbyte.com">Coder Byte</a></p>
</blockquote>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="交换两个变量值"><a href="#交换两个变量值" class="headerlink" title="交换两个变量值"></a>交换两个变量值</h3><p>通常我们用一个临时变量来存放其中一个变量，然后进行交换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> temp = a;</div><div class="line">	a = b;</div><div class="line">	b = temp;</div><div class="line">	<span class="keyword">return</span> [a,b];</div><div class="line">&#125;</div><div class="line">swap(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// [2,1]</span></div></pre></td></tr></table></figure>
<p>但如果两个变量都是数字类型，其实我们还可以巧妙的利用加减法或乘除法来进行交换。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过加减法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	a = a - b;</div><div class="line">	b = b + a;</div><div class="line">	a = b - a;</div><div class="line">	<span class="keyword">return</span> [a,b];</div><div class="line">&#125;</div><div class="line">swap(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// [2,1]</span></div><div class="line"></div><div class="line"><span class="comment">// 通过乘除法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	a = a / b;</div><div class="line">	b = b * a;</div><div class="line">	a = b / a;</div><div class="line">	<span class="keyword">return</span> [a,b];</div><div class="line">&#125;</div><div class="line">swap(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// [2,1]</span></div></pre></td></tr></table></figure>
<p>不过乘除法有可能出现无法整除的bug。</p>
<h3 id="找出字符串中出现次数最多的字母"><a href="#找出字符串中出现次数最多的字母" class="headerlink" title="找出字符串中出现次数最多的字母"></a>找出字符串中出现次数最多的字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先判断每个字母各出现了多少次</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countStr</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> temp = &#123;&#125;;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> s <span class="keyword">of</span> str) &#123;</div><div class="line">		<span class="keyword">if</span>(!temp[s]) &#123;</div><div class="line">			temp[s] = <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			temp[s]++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 再找出出现次数最多的字母</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findChar</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = countStr(str),</div><div class="line">		char = <span class="string">''</span>,</div><div class="line">		max = <span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">		<span class="keyword">if</span>(obj[i] &gt; max) &#123;</div><div class="line">			max = obj[i];</div><div class="line">			char = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> char;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这样有个弊端，如果字符串中出现次数最多的字母有多个，如 “aaabbbcccd”,就只能得到 <code>a</code> 而不是 <code>[a,b,c]</code> 了。</p>
<p>扩展下<code>findChar()</code> 函数。如果出现次数最多的字母仅一个，输出该字母，否则输出数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findChar</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> obj = countStr(str),</div><div class="line">		char = <span class="string">''</span>,</div><div class="line">		max = <span class="number">0</span></div><div class="line">		arr = [];</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">		<span class="keyword">if</span>(obj[i] &gt; max) &#123;</div><div class="line">			<span class="comment">// 清空数组</span></div><div class="line">			arr = [];</div><div class="line">			arr.push(i);</div><div class="line">			max = obj[i];</div><div class="line">			char = i;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[i] == max) &#123;</div><div class="line">			arr.push(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">return</span> arr.length &gt; <span class="number">1</span> ? arr : char;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此方法为常规做法，没有用到二维/Users/tangli/Desktop/practice-project/b/js-array-method1.md数组排序的条件，循环次数较多，不推荐</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</div><div class="line">    <span class="comment">// write code here</span></div><div class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len1 = array.length; i &lt; len1; i++) &#123;</div><div class="line">        <span class="keyword">var</span> tempArr = array[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, len2 = tempArr.length; j &lt; len2; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (target === tempArr[j]) &#123;</div><div class="line">                flag = <span class="literal">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 此方法循环次数较少，推荐</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> raws = array.length,</div><div class="line">		columns = array[<span class="number">0</span>].length,</div><div class="line">		flag = <span class="literal">false</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(raws == <span class="number">0</span> || columns == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> flag;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">        j = columns - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>( i &lt; raws) &#123;</div><div class="line">        <span class="keyword">if</span>(array[i][j] === target) &#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">return</span> flag;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(array[i][j] &gt; target) &#123;</div><div class="line">            j--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h3><p>输入一个链表，从尾到头打印链表每个节点的值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>) </span>&#123;</div><div class="line">    <span class="comment">// write code here</span></div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">while</span>(head) &#123;</div><div class="line">        arr.unshift(head.val);</div><div class="line">        head = head.next;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> arr;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="旋转数组的最小数"><a href="#旋转数组的最小数" class="headerlink" title="旋转数组的最小数"></a>旋转数组的最小数</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// write code here</span></div><div class="line">    <span class="keyword">if</span>(rotateArray.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">var</span> startEle = rotateArray[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = rotateArray.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> item = rotateArray[i];</div><div class="line">        <span class="keyword">if</span>(item &lt; startEle) &#123;</div><div class="line">            startEle = item;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> startEle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="comment">// write code here</span></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> arrtemp = [<span class="number">0</span>,<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            arrtemp.push(arrtemp[i<span class="number">-1</span>] + arrtemp[i<span class="number">-2</span>]);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> arrtemp.pop(); </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="comment">// write code here</span></div><div class="line">    <span class="keyword">return</span> str.split(<span class="string">' '</span>).join(<span class="string">'%20'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Letter-ChangesCompleted"><a href="#Letter-ChangesCompleted" class="headerlink" title="Letter ChangesCompleted"></a>Letter ChangesCompleted</h3><p>使函数LetterChanges（str）获取传递的str参数，并使用以下算法对其进行修改。用字母表中的字母替换字符串中的每个字母（即 c变为d，z变为a）。然后将这个新字符串（a，e，i，o，u）中的每个元音大写，最后返回此修改后的字符串。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LetterChanges</span>(<span class="params">str</span>) </span>&#123; </div><div class="line">  <span class="comment">// code goes here</span></div><div class="line">  <span class="keyword">var</span> temparr = str.split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> output = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = temparr.length; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">var</span> code = temparr[i].charCodeAt();</div><div class="line">      <span class="keyword">if</span>((code &lt;= <span class="number">122</span> &amp;&amp; code &gt;= <span class="number">97</span>) || (code &lt;= <span class="number">90</span> &amp;&amp; code &gt;= <span class="number">65</span>) ) &#123;</div><div class="line">          <span class="keyword">if</span> (code == <span class="number">122</span>) &#123;</div><div class="line">              code = <span class="number">97</span>;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              code++;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">var</span> letter = <span class="built_in">String</span>.fromCharCode(code);</div><div class="line">      <span class="keyword">var</span> vowel = <span class="string">'aeiou'</span>;</div><div class="line">      <span class="keyword">if</span>(vowel.indexOf(letter) &gt; <span class="number">-1</span>) &#123;</div><div class="line">          letter = letter.toLocaleUpperCase();</div><div class="line">      &#125;</div><div class="line">      output.push(letter);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> output.join(<span class="string">''</span>); </div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域小结]]></title>
      <url>/posts/471ca190/</url>
      <content type="html"><![CDATA[<p>关于跨域的资料集合。</p>
<a id="more"></a>
<ul>
<li><a href="http://blog.damonare.cn/2016/12/01/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%95%B4%E7%90%86/" target="_blank" rel="external">前端跨域整理</a></li>
<li><a href="https://juejin.im/post/58c0ac018ac2471814ab9043" target="_blank" rel="external">简单直白的实现jsonp</a></li>
<li><a href="https://zhangguixu.github.io/2016/12/02/jsonp/" target="_blank" rel="external">jsonp的原理与实现</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ie8的兼容性处理]]></title>
      <url>/posts/fbff8979/</url>
      <content type="html"><![CDATA[<p>最近要做一个项目对 ie8 浏览器的兼容性处理， 特此记录。</p>
<a id="more"></a>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>当浏览器小于 ie9 时，加载 xxx.js 文件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if It IE 9]&gt;</span></div><div class="line">	&lt;script src="plugins/XXX.js"&gt;&lt;/script&gt;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>ie8 浏览器特有的 hack：<code>\0</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* ie8 下 line-height 为 18px，否则为 34px */</span></div><div class="line"><span class="selector-class">.control-label</span> &#123; </div><div class="line">	<span class="attribute">line-height</span>: <span class="number">18px</span>\<span class="number">0</span>; </div><div class="line">	<span class="attribute">line-height</span>: <span class="number">34px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>扩展：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select &#123; </div><div class="line">background-color:red\0; /* ie 8/9*/ </div><div class="line">background-color:blue\9\0; /* ie 8/9*/ </div><div class="line">*background-color:#dddd00; /* ie 7*/ </div><div class="line">_background-color:#CDCDCD; /* ie 6*/ </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果要区分ie8 与 ie9， 需要依靠 <code>:root</code>(支持 ie9， 但不支持 ie8)</p>
<p>项目中需要把某元素的 <code>line-height</code> 的值设为 34px， 除了 ie8 下是 18px。故书写顺序应该如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.control-label</span> &#123;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">34px</span>;		    <span class="comment">/* 所有浏览器都是 34px */</span></div><div class="line">	<span class="attribute">line-height</span>: <span class="number">18px</span>\<span class="number">0</span>;		<span class="comment">/* ie8 与 ie9 变为 18px */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">：<span class="selector-tag">root</span> <span class="selector-class">.control-label</span> &#123;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">34px</span>\<span class="number">9</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="修改标题-title-内容"><a href="#修改标题-title-内容" class="headerlink" title="修改标题 title 内容"></a>修改标题 title 内容</h3><p>用了 jquery 框架。原本用的方法是：<code>$(&#39;title&#39;).text(&#39;改变后的标题&#39;)</code></p>
<p>这种办法在 ie9、chrome 浏览器上都没有问题， 但有些浏览器（ie8）是从Body元素开始加载元素，title不是在body元素内，所以 title 读取不到，此时，可以用以下这种通用方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).attr(<span class="string">'title'</span>, <span class="string">'改变后的标题'</span>);</div></pre></td></tr></table></figure>
<p>原理：<code>$(document).attr(&#39;title&#39;)</code>是找文档中的属性是title的元素，因为不管是什么浏览器都有document元素，故此方法更合理</p>
<h3 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf() 方法"></a><code>indexOf()</code> 方法</h3><p>在IE8下，js数组没有<code>indexOf()</code>方法，会报错；而在其它浏览器下(Firefox, Chrome, IE9)都是正常的。</p>
<p>解决：先判断是否有此方法，如果没有，自己写一个。<a href="http://www.jb51.net/article/35277.htm" target="_blank" rel="external">参考资料</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">elt <span class="regexp">/*, from*/</span></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]) || <span class="number">0</span>;</div><div class="line">    <span class="keyword">from</span> = (<span class="keyword">from</span> &lt; <span class="number">0</span>)</div><div class="line">         ? <span class="built_in">Math</span>.ceil(<span class="keyword">from</span>)</div><div class="line">         : <span class="built_in">Math</span>.floor(<span class="keyword">from</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">from</span> &lt; <span class="number">0</span>)</div><div class="line">      <span class="keyword">from</span> += len;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; <span class="keyword">from</span> &lt; len; <span class="keyword">from</span>++)&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">from</span> <span class="keyword">in</span> <span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>[<span class="keyword">from</span>] === elt)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">from</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter() 方法"></a><code>filter()</code> 方法</h3><p>官方 <code>Array.filter()</code> 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=control" target="_blank" rel="external">polyfill</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.filter) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.filter = <span class="function"><span class="keyword">function</span>(<span class="params">fun<span class="regexp">/*, thisArg*/</span></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === <span class="keyword">void</span> <span class="number">0</span> || <span class="keyword">this</span> === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">var</span> len = t.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun !== <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> res = [];</div><div class="line">    <span class="keyword">var</span> thisArg = <span class="built_in">arguments</span>.length &gt;= <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> t) &#123;</div><div class="line">        <span class="keyword">var</span> val = t[i];</div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Technically this should Object.defineProperty at</span></div><div class="line">        <span class="comment">//       the next index, as push can be affected by</span></div><div class="line">        <span class="comment">//       properties on Object.prototype and Array.prototype.</span></div><div class="line">        <span class="comment">//       But that method's new, and collisions should be</span></div><div class="line">        <span class="comment">//       rare, so use the more-compatible alternative.</span></div><div class="line">        <span class="keyword">if</span> (fun.call(thisArg, val, i, t)) &#123;</div><div class="line">          res.push(val);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a><code>forEach()</code>方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ie: arr.forEach</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach != <span class="string">"function"</span>) &#123;</div><div class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> (<span class="params">fn, scope</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, len;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; ++i) &#123;</div><div class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</div><div class="line">        fn.call(scope, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="object-assign-方法"><a href="#object-assign-方法" class="headerlink" title="object.assign() 方法"></a><code>object.assign()</code> 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// ie: object.assign</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign != <span class="string">'function'</span>) &#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">Object</span>.assign = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</div><div class="line"><span class="meta">     'use strict'</span>;</div><div class="line">     <span class="keyword">if</span> (target === <span class="literal">undefined</span> || target === <span class="literal">null</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     <span class="keyword">var</span> output = <span class="built_in">Object</span>(target);</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</div><div class="line">       <span class="keyword">var</span> source = <span class="built_in">arguments</span>[index];</div><div class="line">       <span class="keyword">if</span> (source !== <span class="literal">undefined</span> &amp;&amp; source !== <span class="literal">null</span>) &#123;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> nextKey <span class="keyword">in</span> source) &#123;</div><div class="line">           <span class="keyword">if</span> (source.hasOwnProperty(nextKey)) &#123;</div><div class="line">             output[nextKey] = source[nextKey];</div><div class="line">           &#125;</div><div class="line">         &#125;</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> output;</div><div class="line">    &#125;;</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ie-事件"><a href="#ie-事件" class="headerlink" title="ie 事件"></a><code>ie</code> 事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容 ie 事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">ele, type, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (ele.addEventListener) &#123;</div><div class="line">    ele.addEventListener(type, fn, <span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ele.attachEvent) &#123;</div><div class="line">    ele.attachEvent(<span class="string">'on'</span> + type, fn)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a><code>dataset</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容 ie dataset</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_dataset</span>(<span class="params">ele</span>)</span>&#123;  </div><div class="line">  <span class="keyword">if</span>(ele.dataset)&#123;</div><div class="line">    <span class="keyword">return</span> ele.dataset;  </div><div class="line">  &#125; <span class="keyword">else</span> &#123;  </div><div class="line">      <span class="comment">//兼容代码  </span></div><div class="line">      <span class="keyword">var</span> dataset = &#123;&#125;;  </div><div class="line">      <span class="keyword">var</span> ele_split = ele.outerHTML.split(<span class="string">" "</span>);  </div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,element; i &lt; ele_split.length; i++) &#123;  </div><div class="line">         element = ele_split[i];  </div><div class="line">         <span class="keyword">if</span> (element.substring(<span class="number">0</span>,<span class="number">4</span>) == <span class="string">"data"</span>) &#123;   </div><div class="line">             <span class="keyword">if</span> (element.indexOf(<span class="string">"&gt;"</span>) !=  <span class="number">-1</span>) &#123;   </div><div class="line">                 element = element.split(<span class="string">"&gt;"</span>)[<span class="number">0</span>];  </div><div class="line">             &#125;;  </div><div class="line">             ele_key=element.split(<span class="string">"="</span>)[<span class="number">0</span>].slice(<span class="number">5</span>);  </div><div class="line">             ele_value=element.split(<span class="string">"="</span>)[<span class="number">1</span>].slice(<span class="number">1</span>,<span class="number">-1</span>);  </div><div class="line">             <span class="keyword">if</span>(ele_key.indexOf(<span class="string">"-"</span>) ==  <span class="number">-1</span>)&#123;  </div><div class="line">                 dataset[ele_key] = ele_value;  </div><div class="line">             &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                 ele_keys=ele_key.split(<span class="string">"-"</span>);  </div><div class="line">                 ele_key=ele_keys[<span class="number">0</span>];  </div><div class="line">                 <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;ele_keys.length;i++)&#123;  </div><div class="line">                     ele_key+=replaceReg(ele_keys[i]);  </div><div class="line">                 &#125;                 </div><div class="line">             &#125;  </div><div class="line">         &#125;;  </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">return</span> dataset;  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断浏览器类型"><a href="#判断浏览器类型" class="headerlink" title="判断浏览器类型"></a>判断浏览器类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">'xxx.xxxxxxxx.xxx'</span>;</div><div class="line"><span class="keyword">if</span>(navigator.userAgent.inddexOf(<span class="string">'MSIE'</span>) &gt;= <span class="number">0</span> ) &#123;</div><div class="line">	<span class="keyword">var</span> brower = navigator.appName,</div><div class="line">		b_version = navigator.appVersion,</div><div class="line">		version = b_version.split(<span class="string">';'</span>),</div><div class="line">		trim_version = version[<span class="number">1</span>].replace(<span class="regexp">/[ ]/g</span>, <span class="string">''</span>)</div><div class="line">	<span class="keyword">if</span> (browser == <span class="string">'Microsoft Internat Explorer'</span> &amp;&amp; trim_version == <span class="string">'MSIE8.0'</span>) &#123;</div><div class="line">		<span class="built_in">window</span>.location.href = url;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// write code;</span></div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// write code;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>通过 iframe ，实现点击并在新窗口下载内容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eleIframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">eleIframe.src = url;</div><div class="line">eleIframe.style.display = <span class="string">"none"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(eleIframe);</div></pre></td></tr></table></figure>
<h3 id="日期格式的转换"><a href="#日期格式的转换" class="headerlink" title="日期格式的转换"></a>日期格式的转换</h3><p>提交表单时，需要将字符串格式的数据如<code>”2017-06-23“</code>转为日期格式。<br>原来的处理如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dateVal = formData[i].value;</div><div class="line"><span class="built_in">console</span>.log(dateVal + <span class="string">' || '</span> + <span class="keyword">typeof</span>(dateVal));	<span class="comment">// '2016-12-21' || string</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> deadline = <span class="keyword">new</span> <span class="built_in">Date</span>(dateVal);		</div><div class="line"><span class="built_in">console</span>.log(deadline + <span class="string">' || '</span> + <span class="keyword">typeof</span>(dateVal));	<span class="comment">// Wed Dec 21 2016 08:00:00 GMT+0800 (CST)  || object</span></div></pre></td></tr></table></figure>
<p>此做法在 chrome 及 ie9 浏览器下均无问题，但在 ie8 浏览器中，会出现如下情况：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deadline = <span class="keyword">new</span> <span class="built_in">Date</span>(dateVal);		</div><div class="line"><span class="built_in">console</span>.log(deadline + <span class="string">' || '</span> + <span class="keyword">typeof</span>(dateVal));	<span class="comment">// NaN || object</span></div></pre></td></tr></table></figure>
<p>故为了兼容 ie8 ，对日期需进一步处理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dateVal = formData[i].value;</div><div class="line"></div><div class="line"><span class="comment">// 处理日期格式</span></div><div class="line"><span class="built_in">console</span>.log(dateVal);		<span class="comment">// '2016-12-21'</span></div><div class="line">dateVal = dateVal.replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>);</div><div class="line"><span class="built_in">console</span>.log(dateVal);		<span class="comment">// '2016/12/21'</span></div><div class="line"></div><div class="line"><span class="comment">// 后面照常不做更改</span></div><div class="line"><span class="keyword">var</span> deadline = <span class="keyword">new</span> <span class="built_in">Date</span>(dateVal);		</div><div class="line"><span class="built_in">console</span>.log(deadline + <span class="string">' || '</span> + <span class="keyword">typeof</span>(dateVal));	<span class="comment">// Wed Dec 21 2016 08:00:00 GMT+0800 (CST)  || object</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 浏览器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ie8兼容性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于MEAN的全栈开发实例demo]]></title>
      <url>/posts/5e52ca19/</url>
      <content type="html"><![CDATA[<p>MEAN 堆栈：MongoDB、Express、AngularJS 和 Node.js。<br>MEAN 堆栈代表着一种完全现代的 Web 开发方法：一种语言运行在应用程序的所有层次上，从客户端到服务器，再到持久层。</p>
<a id="more"></a>
<p><code>package.json</code> 文件还提供几个依赖关系列表：</p>
<ul>
<li><code>dependencies</code> 部分列出了运行时的依赖关系。<ul>
<li><code>npm i -S something</code></li>
</ul>
</li>
<li><code>devDependencies</code> 部分列出了开发过程中需要的模块。<ul>
<li><code>npm i -D something</code> 安装</li>
</ul>
</li>
<li><code>peerDependencies</code> 部分支持作者定义项目之间的 ”对等“ 关系。这种功能通常用于指定基础项目与其插件之间的关系。</li>
</ul>
<blockquote>
<p>本实例根据 <a href="https://blog.udemy.com/node-js-tutorial/" target="_blank" rel="external">Node.js Tutorial</a> 操作，简要记录操作步骤及遇到的问题，项目代码详见<a href="">github</a>。</p>
</blockquote>
<p><strong>开发环境准备</strong>：</p>
<p>全局安装 <a href="http://mongodb.org" target="_blank" rel="external">Mongo</a>，<a href="https://nodejs.org" target="_blank" rel="external">Node</a>, Express, Express Generator, Nodemon, Angular.js;</p>
<p>项目内安装 Monk (用来读写MongoDB的Node模块)</p>
<h2 id="一、从数据库中查询视频"><a href="#一、从数据库中查询视频" class="headerlink" title="一、从数据库中查询视频"></a>一、从数据库中查询视频</h2><blockquote>
<p>通过 mongodb 来建立数据库，可参考 <a href="https://cnodejs.org/topic/504b4924e2b84515770103dd" target="_blank" rel="external">Mongoose学习参考文档</a></p>
</blockquote>
<h3 id="第1步-构建数据库"><a href="#第1步-构建数据库" class="headerlink" title="第1步 构建数据库"></a>第1步 构建数据库</h3><p>利用 <a href="http://robomongo.org" target="_blank" rel="external">RoboMongo</a>, 新建数据库<code>vidzy</code>，在该数据库下建立集合<code>videos</code>， 向其中插入以下三条数据：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"title"</span> : <span class="string">"Terminator Genisys"</span>,</div><div class="line"> <span class="attr">"genre"</span> : <span class="string">"SciFi"</span>,</div><div class="line"> <span class="attr">"description"</span> : <span class="string">"When John Connor, leader of the human resistance, sends Sgt. Kyle Reese back to 1984 to protect Sarah Connor and safeguard the future, an unexpected turn of events creates a fractured timeline."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"title"</span> : <span class="string">"The Lord of the Rings"</span>,</div><div class="line"> <span class="attr">"genre"</span> : <span class="string">"Fantasy"</span>,</div><div class="line"> <span class="attr">"description"</span> : <span class="string">"A meek hobbit of the Shire and eight companions set out on a journey to Mount Doom to destroy the One Ring and the dark lord Sauron."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attr">"title"</span> : <span class="string">"Apollo 13"</span>,</div><div class="line"> <span class="attr">"genre"</span> : <span class="string">"Drama"</span>,</div><div class="line"> <span class="attr">"description"</span> : <span class="string">"NASA must devise a strategy to return Apollo 13 to Earth safely after the spacecraft undergoes massive internal damage putting the lives of the three astronauts on board in jeopardy."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="第2步：-通过-Express-创建项目"><a href="#第2步：-通过-Express-创建项目" class="headerlink" title="第2步： 通过 Express 创建项目"></a>第2步： 通过 Express 创建项目</h3><h4 id="命令行建立项目"><a href="#命令行建立项目" class="headerlink" title="命令行建立项目"></a>命令行建立项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir node_project &amp;&amp; cd node_project</div><div class="line">express vidzy</div><div class="line">cd vidzy</div><div class="line"><span class="comment">// 安装依赖</span></div><div class="line">npm i</div><div class="line">npm i --save monk</div></pre></td></tr></table></figure>
<h4 id="连接数据库并配置路由"><a href="#连接数据库并配置路由" class="headerlink" title="连接数据库并配置路由"></a>连接数据库并配置路由</h4><p>在 <code>routes</code> 目录下创建 <code>videos.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">// 连接数据库</span></div><div class="line"><span class="keyword">var</span> monk = <span class="built_in">require</span>(<span class="string">'monk'</span>);</div><div class="line"><span class="keyword">var</span> db = monk(<span class="string">'localhost:27017/vidzy'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 实现路由处理器逻辑</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> conllection = db.get(<span class="string">'videos'</span>);</div><div class="line">    conllection.find(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, videos</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">        res.json(videos);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<p>在根目录的 <code>app.js</code> 下添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> videos = <span class="built_in">require</span>(<span class="string">'./routes/videos'</span>);</div><div class="line">app.use(<span class="string">'/api/videos'</span>, videos);</div></pre></td></tr></table></figure>
<h3 id="第3步-使用-Angular"><a href="#第3步-使用-Angular" class="headerlink" title="第3步 使用 Angular"></a>第3步 使用 Angular</h3><h4 id="引入主要脚本"><a href="#引入主要脚本" class="headerlink" title="引入主要脚本"></a>引入主要脚本</h4><p>添加 Angular 脚本到应用中。 在 <strong>views &gt; layout.jade</strong> 文件中添加以下四个脚本</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">script(src=<span class="string">'https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.5/angular.js'</span></div><div class="line">script(src=<span class="string">'https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.5/angular-resource.js'</span>) 	<span class="comment">// 用来调用 RESTful APIs</span></div><div class="line">script(src=<span class="string">'https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.5/angular-route.js'</span>)</div><div class="line">script(src=<span class="string">'/javascripts/vidzy.js'</span>)	<span class="comment">// 文件在 public &gt; javascripts 中</span></div></pre></td></tr></table></figure>
<h4 id="添加-Angular"><a href="#添加-Angular" class="headerlink" title="添加 Angular"></a>添加 Angular</h4><ul>
<li><p>第1步，在HTML元素上添加 <code>ng-app</code> 属性。当Angular脚本加载完时，它将在DOM中找到这个属性然后挂载应用程序。</p>
<ul>
<li>打开 layout.jade 添加 ng-app 到html元素。<code>html(ng-app=&#39;Vidzy&#39;)</code></li>
</ul>
</li>
<li><p>第2步，为应用创建一个Angular模块。Angular应用通常由1个或者多个模块构成。这个简单的应用，你只需要一个 app 模块。但是随着应用的扩展，为了提升代码结构和可维护性，你可能需要划分不同的功能到不同的模块。</p>
<ul>
<li>创建 <code>Vidzy</code> 模块 。 打开 <strong>public &gt; javascript &gt; vidzy.js</strong>, 输入代码 <code>var app = angular.module(&#39;Vidzy&#39;, [])</code></li>
</ul>
</li>
</ul>
<h4 id="重构页面"><a href="#重构页面" class="headerlink" title="重构页面"></a>重构页面</h4><p>新建 <strong>public &gt; partials &gt; home.html</strong> : <code>&lt;h1&gt;home page&lt;/h2&gt;</code></p>
<p>打开 <strong>public &gt; javascript &gt; vidzy.js</strong>, 在依赖数组中添加 <strong>ngRoute</strong> 的引用。（ngRoute：用于构建 Angular 模块中配置路由）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'Vidzy'</span>, [<span class="string">'ngRoute'</span>]);</div><div class="line">app.config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">$routeProvider</div><div class="line">    .when(<span class="string">'/'</span>, &#123;</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'partials/home.html'</span></div><div class="line">    &#125;)</div><div class="line">    .otherwise(&#123;</div><div class="line">        <span class="attr">redirectTo</span>: <span class="string">'/'</span></div><div class="line">    &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>未完待续……</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/web/wa-mean1/index.html?ca=drs-" target="_blank" rel="external">精通MEAN</a></li>
<li><a href="https://blog.udemy.com/node-js-tutorial/" target="_blank" rel="external">Node.js Tutorial</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> node.js </category>
            
            <category> project </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
            <tag> project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[吃在北京]]></title>
      <url>/posts/7ea5d6e0/</url>
      <content type="html"><![CDATA[<h2 id="老北京味道"><a href="#老北京味道" class="headerlink" title="老北京味道"></a>老北京味道</h2><h3 id="大兴胡同面茶"><a href="#大兴胡同面茶" class="headerlink" title="大兴胡同面茶"></a>大兴胡同面茶</h3><p>南大兴胡同 7 号 （北新桥附近）</p>
<h2 id="小龙虾"><a href="#小龙虾" class="headerlink" title="小龙虾"></a>小龙虾</h2><h3 id="北京龙脉虾城"><a href="#北京龙脉虾城" class="headerlink" title="北京龙脉虾城"></a>北京龙脉虾城</h3><p>北土城A出口 附近</p>
<h2 id="鱼"><a href="#鱼" class="headerlink" title="鱼"></a>鱼</h2><h3 id="陈阿婆"><a href="#陈阿婆" class="headerlink" title="陈阿婆"></a>陈阿婆</h3><p>连锁。人均 100</p>
<h3 id="渝是乎"><a href="#渝是乎" class="headerlink" title="渝是乎"></a>渝是乎</h3><p>连锁。人均 40</p>
]]></content>
      
        <categories>
            
            <category> 北京 </category>
            
            <category> 食 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 北京去哪儿吃 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript30-模拟时钟]]></title>
      <url>/posts/7e36f86a/</url>
      <content type="html"><![CDATA[<p>利用 css3 与 原生 js 实现时钟效果。</p>
<a id="more"></a>
<p><a href="http://www.sugar1075.online/javascript30-challenge/02_clock/index.html">项目效果</a>； <a href="https://github.com/Emma1075/javascript30-challenge/tree/master/02_clock" target="_blank" rel="external">代码地址</a></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>获取当前时间的时、分、秒，以当前时间初始化时钟： <code>initTime()</code>；</li>
<li>利用 <code>setInterval()</code> 方法每隔一秒执行一次 <code>updateTime()</code> 函数；</li>
<li><code>updateTime()</code> 函数中：利用 css3 的 <code>transform: rotate()</code> 属性，对指针进行旋转。<ul>
<li>利用伪元素<code>:after</code>设置中心点</li>
<li>利用 css3 属性 <code>transform-origin</code> 设置指针的旋转中心</li>
</ul>
</li>
</ol>
<h2 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h2><p>核心算法在于每秒钟各指针改变的角度。令 <code>degree</code> 等于时钟上最小两格之间的度数.<code>degree = (1 / 60) * 360</code></p>
<p>秒针： 1 秒改变的度数为 <code>1 * degree</code></p>
<p>分针： 60 秒改变 1 个 <code>degree</code> =&gt; 1 秒改变 1/60 个 <code>dgree</code>。即：<code>(1 / 60) * degree</code></p>
<p>时针： 60 分改变 5 个 <code>degree</code> =&gt; 1 分 改变 1/60 个 <code>5 * degree</code> =&gt; 1 秒改变 <code>（1 / 60 / 60) * (5 * degree)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    sDeg += <span class="number">1</span> * degree; </div><div class="line">    mDeg += ( <span class="number">1</span> / <span class="number">60</span> ) * degree;</div><div class="line">    hDeg += ( <span class="number">1</span> / <span class="number">60</span> / <span class="number">60</span>) * (<span class="number">5</span> * degree);</div><div class="line"></div><div class="line">    handHours.style.transform = <span class="string">`rotate(<span class="subst">$&#123; hDeg &#125;</span>deg)`</span>;</div><div class="line">    handMinutes.style.transform  = <span class="string">`rotate(<span class="subst">$&#123; mDeg &#125;</span>deg)`</span>;</div><div class="line">    handSeconds.style.transform = <span class="string">`rotate(<span class="subst">$&#123; sDeg &#125;</span>deg)`</span>;;</div><div class="line">&#125;</div><div class="line">setInterval(updateTime,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*法一*/</div><div class="line">div &#123;</div><div class="line">	position: absolute;</div><div class="line">	top: 50%;</div><div class="line">	left: 50%;</div><div class="line">	transform: translate(-50%, -50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*法二*/</div><div class="line">div &#123;</div><div class="line">	position: absolute;</div><div class="line">	left: 0;;</div><div class="line">	right: 0;</div><div class="line">	top: 0;</div><div class="line">	bottom: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="css3-属性"><a href="#css3-属性" class="headerlink" title="css3 属性"></a>css3 属性</h3><p><code>transform-origin</code>设置旋转中心. <a href="http://www.w3school.com.cn/cssref/pr_transform-origin.asp" target="_blank" rel="external">transform-origin</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.hours</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">48.75%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">30%</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">2.5%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">20%</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">100%</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.minutes</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">49%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">20%</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">2%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">30%</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.seconds</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">left</span>: <span class="number">49.25%</span>;</div><div class="line">	<span class="attribute">top</span>: <span class="number">15%</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">1.5%</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">43%</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#000</span>;</div><div class="line">	<span class="attribute">z-index</span>: <span class="number">5</span>;</div><div class="line">	<span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">80%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="timer-异步函数扩展"><a href="#timer-异步函数扩展" class="headerlink" title="timer 异步函数扩展"></a>timer 异步函数扩展</h2><p>实现一个倒计时效果</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.querySelector(<span class="string">'.ball'</span>);</div><div class="line">ball.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</div><div class="line"></div><div class="line">	<span class="keyword">var</span> tId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> num = <span class="number">10</span> - <span class="built_in">Math</span>.round((<span class="built_in">Date</span>.now() - startTime)/<span class="number">1000</span>);</div><div class="line">		ball.innerHTML = <span class="built_in">Math</span>.max(num, <span class="number">0</span>);</div><div class="line">		<span class="comment">// 清除倒计时</span></div><div class="line">		<span class="keyword">if</span> (num &lt;= <span class="number">0</span>) &#123;</div><div class="line">			clearInterval(tId);</div><div class="line">		&#125;</div><div class="line">	&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 项目练习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js-project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript30-模拟打鼓效果]]></title>
      <url>/posts/df6c53af/</url>
      <content type="html"><![CDATA[<p>来自于J avaScript30 的项目练习。</p>
<a id="more"></a>
<p><a href="https://github.com/Emma1075/javascript30-challenge/tree/master/01_drum-kit" target="_blank" rel="external">代码地址</a>；  <a href="http://www.sugar1075.online/javascript30-challenge/01_drum-kit/">demo 效果</a></p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="获取所有的key。"><a href="#获取所有的key。" class="headerlink" title="获取所有的key。"></a>获取所有的<code>key</code>。</h3><p>注意：<code>querySelectorAll()</code>获取到的是<code>NodeList</code> 而非 <code>Array</code>。需要进行转化,转化方法如下：</p>
<ul>
<li>es6: 通过 <code>Array.from()</code></li>
<li>es5: 通过<code>Array.prototype.slice.call(this, 0)</code> 或 <code>[].slice.call(this, 0)</code> </li>
</ul>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>得到 <code>kCode</code> 之后，利用属性选择器 <code>data-key=&quot;kCode&quot;]</code> 来进行选择。但由于 <code>Kcode</code> 是一个变量，需要进行处理。</p>
<ul>
<li>es6: 通过模板字面量。语法为：<code>字符串 ${ 变量、属性名 }</code>。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="external">详见MDN</a>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key="<span class="subst">$&#123;kCode&#125;</span>"]`</span>);</div><div class="line"><span class="keyword">var</span> key = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key="<span class="subst">$&#123;kCode&#125;</span>"]`</span>);</div></pre></td></tr></table></figure>
<ul>
<li>es5: 通过字符串拼接</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">'audio[data-key="'</span> + kCode + <span class="string">'"]'</span>);</div><div class="line"><span class="keyword">var</span> key = <span class="built_in">document</span>.querySelector(<span class="string">'div[data-key=" '</span> + kCode + <span class="string">'"]'</span>);</div></pre></td></tr></table></figure>
<h3 id="长按保持连续播放"><a href="#长按保持连续播放" class="headerlink" title="长按保持连续播放"></a>长按保持连续播放</h3><p><code>currentTime</code> 属性设置或返回音频/视频播放的当前位置（以秒计）。<br>当设置该属性时，播放会跳跃到指定的位置。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">audio.currentTime = <span class="number">0</span>;</div><div class="line">audio.play();</div></pre></td></tr></table></figure>
<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ele.className += <span class="string">" playing"</span>;	<span class="comment">// 加空格	</span></div><div class="line">ele.classList.add(<span class="string">'playing'</span>);	<span class="comment">// 建议这种，方便移除</span></div></pre></td></tr></table></figure>
<h3 id="移除样式"><a href="#移除样式" class="headerlink" title="移除样式"></a>移除样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ele.classList.remove(<span class="string">'playing'</span>)；</div></pre></td></tr></table></figure>
<p><code>event.propertyName</code> 设置或返回变化了的属性名称</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>监听页面的keydown事件，触发playAudio函数。 在<code>window</code> 上添加<code>keydown</code>事件。</li>
<li>事件处理。<ol>
<li>通过 <code>data-key</code> 获取按键的 <code>keyCode</code>, 来检测按了哪个按键</li>
<li>点击按键的时候，播放音乐并更改样式</li>
<li>并非每个按键都有音效，及退出。</li>
</ol>
</li>
<li>监听按键的<code>transitionend</code> 事件， 按键元素动画结束后触发移除动画的 <code>removeTransition()</code> 函数。</li>
</ol>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeTransition</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="comment">// 用 box-shadow 或者 transform 都可以。</span></div><div class="line">  <span class="keyword">if</span> (e.propertyName !== <span class="string">'box-shadow'</span>) <span class="keyword">return</span>;</div><div class="line">  e.target.classList.remove(<span class="string">'playing'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">playAudio</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</div><div class="line">  <span class="keyword">var</span> kCode = e.keyCode;</div><div class="line">  <span class="keyword">var</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">'audio[data-key="'</span>+ kCode+ <span class="string">'"]'</span>);</div><div class="line">  <span class="keyword">var</span> key = <span class="built_in">document</span>.querySelector(<span class="string">'div[data-key="'</span>+ kCode + <span class="string">'"]'</span>);</div><div class="line">  <span class="comment">// var audio = document.querySelector(`audio[data-key="$&#123;kCode&#125;"]`);</span></div><div class="line">  <span class="comment">// var key = document.querySelector(`div[data-key="$&#123;kCode&#125;"]`);</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!audio || !key) <span class="keyword">return</span>;</div><div class="line">  audio.currentTime = <span class="number">0</span>;</div><div class="line">  audio.play();</div><div class="line"></div><div class="line">  key.className += <span class="string">' playing'</span>;</div><div class="line">  <span class="comment">// key.classList.add('playing');</span></div><div class="line">  key.addEventListener(<span class="string">'transitionend'</span>, removeTransition);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'keydown'</span>, playAudio);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 项目练习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js-project </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编写一个简单的jQuery插件]]></title>
      <url>/posts/8687d30e/</url>
      <content type="html"><![CDATA[<p>摘要：会使用 jQuery 写插件才算是真正入门 JS。 那么，该如何利用 jQuery 来自己实现一个插件呢？<br><a id="more"></a></p>
<blockquote>
<p>参考资料： <a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a> ; <a href="http://www.cnblogs.com/landeanfen/p/5159911.html" target="_blank" rel="external">JS组件系列——使用HTML标签的data属性初始化JS组件</a>; <a href="http://www.open-open.com/lib/view/open1478244299973.html" target="_blank" rel="external">编写原生的 JavaScript 插件</a></p>
</blockquote>
<h2 id="编写格式"><a href="#编写格式" class="headerlink" title="编写格式"></a>编写格式</h2><h3 id="放在自执行函数中"><a href="#放在自执行函数中" class="headerlink" title="放在自执行函数中"></a>放在自执行函数中</h3><p>新建一个 <code>myPlugin.js</code> 文件，用于编写插件。将插件代码写在一个自执行函数中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$,window,document,undefined</span>) </span>&#123;</div><div class="line"><span class="comment">// 编写插件代码</span></div><div class="line"></div><div class="line">)(jQuery,<span class="built_in">window</span>,<span class="built_in">document</span>)</div></pre></td></tr></table></figure>
<ol>
<li>加分号是为了更好的兼容性</li>
<li>将 <code>$</code> 作为匿名函数的形参，可以使用 <code>$</code> 作为 <code>jQuery</code> 的缩写别名</li>
<li>将 jQuery 作为实参传递给匿名函数</li>
</ol>
<h3 id="插件开发方式"><a href="#插件开发方式" class="headerlink" title="插件开发方式"></a>插件开发方式</h3><p>插件开发模式主要分为3种</p>
<ul>
<li>通过<code>$.extend()</code>来扩展jQuery</li>
<li>通过<code>$.fn.pluginName()</code>向jQuery添加新的方法 </li>
<li>通过<code>$.widget()</code>应用jQuery UI的部件工厂方式创建</li>
</ul>
<p>我们通常用<code>$.fn.pluginName()</code>方法来进行插件开发。</p>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>将一个新的空对象做为<code>$.extend</code>的第一个参数，defaults 和用户传递的参数对象紧随其后，这样做的好处是所有值被合并到这个空对象上，保护了插件里面的默认值.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// 利用 $.extend() 方法设置默认参数。</span></div><div class="line">	<span class="keyword">var</span> opts = $.extend(&#123;&#125;,$.fn.tab.defaults,options || &#123;&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置默认参数</span></div><div class="line">$.fn.myPlugin.defaults = &#123;</div><div class="line">        <span class="attr">trigger_event_type</span>: <span class="string">'click'</span>,</div><div class="line">        <span class="attr">change</span>: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'current index: '</span> + index);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="面向对象的插件开发"><a href="#面向对象的插件开发" class="headerlink" title="面向对象的插件开发"></a>面向对象的插件开发</h3><p>将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$,window,document,undefined</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opts</span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.$ele = ele;</div><div class="line">		<span class="keyword">this</span>.default = &#123;</div><div class="line">			<span class="string">'color'</span>: <span class="string">'red'</span>,</div><div class="line">			<span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">this</span>.options = $.extend(&#123;&#125;,<span class="keyword">this</span>.default,opts || &#123;&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	Beautifier.prototype = &#123;</div><div class="line">		<span class="attr">beautify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.$ele.css(&#123;</div><div class="line">				<span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</div><div class="line">				<span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, opts);</div><div class="line">		<span class="keyword">return</span> beautifier.beautify();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;)(jQuery,<span class="built_in">window</span>,<span class="built_in">document</span>)</div></pre></td></tr></table></figure>
<p>插件调用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	$(<span class="string">'a'</span>).myPlugin(&#123;</div><div class="line">		<span class="string">'color'</span>: <span class="string">'ccc'</span>,</div><div class="line">		<span class="string">'fontSize'</span>: <span class="string">'18px'</span></div><div class="line">	&#125;）</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="tab选项卡实例"><a href="#tab选项卡实例" class="headerlink" title="tab选项卡实例"></a>tab选项卡实例</h2><p>手写一个简单的插件。<br><a href="http://www.sugar1075.online/posts/791e2dfc/#more">Tab 选项卡的插件封装)</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端常见面试题]]></title>
      <url>/posts/1d0f8d42/</url>
      <content type="html"><![CDATA[<p>收集的一些前端面试题。<br><a id="more"></a></p>
<h2 id="XHTML和HTML有什么区别"><a href="#XHTML和HTML有什么区别" class="headerlink" title="XHTML和HTML有什么区别?"></a>XHTML和HTML有什么区别?</h2><ul>
<li>XHTML: 基于XML的置标语言。<ul>
<li>元素必须被正确嵌套</li>
<li>元素必须关闭</li>
<li>标签名必须小写</li>
<li>文档必须有根元素</li>
</ul>
</li>
<li>HTML: 基本的网页设计语言。</li>
</ul>
<h2 id="IE-和-DOM-事件流的区别"><a href="#IE-和-DOM-事件流的区别" class="headerlink" title="IE 和 DOM 事件流的区别"></a>IE 和 DOM 事件流的区别</h2><ol>
<li>IE 事件不加 <code>on</code></li>
<li>this 指向问题</li>
<li>参数不同</li>
<li>执行顺序不同</li>
</ol>
<h2 id="display-none和visibility-hidden的区别"><a href="#display-none和visibility-hidden的区别" class="headerlink" title="display:none和visibility:hidden的区别"></a>display:none和visibility:hidden的区别</h2><p>答案：display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。<br>visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。</p>
<h2 id="position的absolute与fixed共同点与不同点"><a href="#position的absolute与fixed共同点与不同点" class="headerlink" title="position的absolute与fixed共同点与不同点"></a>position的absolute与fixed共同点与不同点</h2><p>答案: A：共同点：<br>1.改变行内元素的呈现方式，display被置为block；<br>2.让元素脱离普通流，不占据空间；<br>3.默认会覆盖到非定位元素上</p>
<p>B不同点：<br>absolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。<br>当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。</p>
<h2 id="CSS-选择符"><a href="#CSS-选择符" class="headerlink" title="CSS 选择符"></a>CSS 选择符</h2><p>CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</p>
<h3 id="CSS-选择符："><a href="#CSS-选择符：" class="headerlink" title="CSS 选择符："></a>CSS 选择符：</h3><p>1.id选择器(# myid)<br>2.类选择器(.myclassname)<br>3.标签选择器(div, h1, p)<br>4.相邻选择器(h1 + p)<br>5.子选择器(ul &gt; li)<br>6.后代选择器(li a)<br>7.通配符选择器( * )<br>8.属性选择器(a[rel = “external”])<br>9.伪类选择器(a: hover, li:nth-child)</p>
<h3 id="可继承的样式："><a href="#可继承的样式：" class="headerlink" title="可继承的样式："></a>可继承的样式：</h3><p>1.font-size<br>2.font-family<br>3.color<br>4.text-indent</p>
<h3 id="不可继承的样式："><a href="#不可继承的样式：" class="headerlink" title="不可继承的样式："></a>不可继承的样式：</h3><p>1.border<br>2.padding<br>3.margin<br>4.width<br>5.height</p>
<h3 id="优先级算法："><a href="#优先级算法：" class="headerlink" title="优先级算法："></a>优先级算法：</h3><p>1.优先级就近原则，同权重情况下样式定义最近者为准;<br>2.载入样式以最后载入的定位为准;<br>3.!important&gt;  id &gt; class &gt; tag<br>4.important 比 内联优先级高，但内联比 id 要高</p>
<h3 id="CSS3新增伪类举例："><a href="#CSS3新增伪类举例：" class="headerlink" title="CSS3新增伪类举例："></a>CSS3新增伪类举例：</h3><ul>
<li>p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素。</p></li>
<li>p:last-of-type 选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素。</p></li>
<li>p:only-of-type 选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素。</p></li>
<li>p:only-child   选择属于其父元素的唯一子元素的每个<p> 元素。</p></li>
<li>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <p> 元素。</p></li>
<li>:enabled:disabled 控制表单控件的禁用状态。</li>
<li>:checked       单选框或复选框被选中。</li>
</ul>
<h2 id="你知道多少种Doctype文档类型？"><a href="#你知道多少种Doctype文档类型？" class="headerlink" title="你知道多少种Doctype文档类型？"></a>你知道多少种Doctype文档类型？</h2><ol>
<li>该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。</li>
<li>HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。</li>
<li>XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。</li>
<li>Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks（包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。</li>
</ol>
<h2 id="简单说一下浏览器本地存储是怎样的"><a href="#简单说一下浏览器本地存储是怎样的" class="headerlink" title="简单说一下浏览器本地存储是怎样的"></a>简单说一下浏览器本地存储是怎样的</h2><p>在较高版本的浏览器中，js提供了 <code>sessionStorage</code> 和 <code>globalStorage</code>。在HTML5中提供了 <code>localStorage</code> 来取代<code>globalStorage</code>。<br>html5中的Web Storage包括了两种存储方式：<code>sessionStorage</code> 和 <code>localStorage</code>。<br><code>sessionStorage</code>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此<code>sessionStorage</code>不是一种持久化的本地存储，仅仅是会话级别的存储。<br>而<code>localStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<h2 id="在JavaScript脚本中，isNaN的作用是什么？"><a href="#在JavaScript脚本中，isNaN的作用是什么？" class="headerlink" title="在JavaScript脚本中，isNaN的作用是什么？"></a>在JavaScript脚本中，isNaN的作用是什么？</h2><p>isNaN的作用是判断值是否为数字</p>
<h2 id="编写JavaScript脚本生成1-6之间的整数？"><a href="#编写JavaScript脚本生成1-6之间的整数？" class="headerlink" title="编写JavaScript脚本生成1-6之间的整数？"></a>编写JavaScript脚本生成1-6之间的整数？</h2><pre><code class="js"><span class="keyword">var</span> NowFrame;
NowFrame=<span class="built_in">Math</span>.random( )*<span class="number">6</span>+<span class="number">1</span> <span class="comment">// 随机生成一个1-6之间的小数</span>
NowFrame=<span class="built_in">parseInt</span>(NowFrame) <span class="comment">// 把1-6之间的小数转化为整数</span>
</code></pre>
<h2 id="Ajax的优缺点都有什么？"><a href="#Ajax的优缺点都有什么？" class="headerlink" title="Ajax的优缺点都有什么？"></a>Ajax的优缺点都有什么？</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>页面无刷新，用户体验非常好。</li>
<li>使用异步方式与服务器通信，具有更加迅速的响应能力。</li>
<li>可以把一些服务器负担的工作转到客户端，利用客户端闲置的能力来处理，减轻服务器负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担。</li>
<li>基于标准化并被广泛支持的技术，不需要下载插件或者小程序。</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><ol>
<li>Ajax不支持浏览器back按钮。</li>
<li>安全问题， Ajax暴露了与服务器交互的细节。</li>
<li>对搜索引擎的支持比较弱。</li>
<li>破坏了程序的异常机制。</li>
<li>不容易调试。</li>
</ol>
<h2 id="简述一下Ajax的工作原理"><a href="#简述一下Ajax的工作原理" class="headerlink" title="简述一下Ajax的工作原理"></a>简述一下Ajax的工作原理</h2><p>Ajax的核心是JavaScript对象<code>XmlHttpRequest</code>。该对象在Internet Explorer 5中首次引入，它是一种支持异步请求的技术。简而言之，<code>XmlHttpRequest</code>使您可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。</p>
<h2 id="CSS-DIV开发Web页面的优势有哪些？"><a href="#CSS-DIV开发Web页面的优势有哪些？" class="headerlink" title="CSS+DIV开发Web页面的优势有哪些？"></a>CSS+DIV开发Web页面的优势有哪些？</h2><ol>
<li>CSS+DIV，这个网页设计模式中，DIV承担了网页的内容，CSS承担了网页的样式。这样就使网页的内容和样式的分离开来。有利于页面的维护升级。</li>
<li>有助于提高搜索引擎亲和力（快速找到需要的数据，而不是像在TABLE中一层层的查找）</li>
<li>有助于页面的重构(换皮肤如blog，直接套用另外一套样式就可以实现，而不用改动网页脚本。)</li>
</ol>
<h2 id="相等"><a href="#相等" class="headerlink" title="==相等"></a><code>==</code>相等</h2><p>== | 0 | “” | [] | false | undefined | null|<br>|—|—| —|—|—| —| —|<br>| <strong>0</strong> | - | true  |      true  |     true      |     |<br>| <strong>“”</strong>| true | - |  true |  true  |           |     |<br>| <strong>[]</strong> | true | true |   - |   true     |           |     |<br>| <strong>false</strong> | true | true |  true |  - |          |     |<br>| <strong>undefined</strong> |  |  |    |     |      -    |  true   |<br>| <strong>null</strong> |  |  |    |        |     true      |  -   |</p>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端资源]]></title>
      <url>/posts/af66c9c0/</url>
      <content type="html"><![CDATA[<h2 id="github-资料总结"><a href="#github-资料总结" class="headerlink" title="github 资料总结"></a>github 资料总结</h2><ul>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="external">front-end-collect</a> 前端优秀博客汇总</li>
<li><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="external">Front-end-Interview-questions</a></li>
<li><a href="https://github.com/youyudehexie/node123" target="_blank" rel="external">node123</a> node中文资料汇总</li>
</ul>
<h2 id="视频资源"><a href="#视频资源" class="headerlink" title="视频资源"></a>视频资源</h2><ul>
<li><a href="https://t.75team.com/video/" target="_blank" rel="external">奇舞学院</a> 课程关键词：HTML &amp; CSS, JavaScript等等</li>
<li><a href="http://www.khanacademy.org/" target="_blank" rel="external">Khan Academy</a> 课程关键词：JS, HTML/CSS, SQL, 等等</li>
<li><a href="https://twww.udemy.com/" target="_blank" rel="external">Udemy</a> 它的目标用户是那些已有基础的人群，适合提高</li>
<li><a href="http://www.coursera.org/" target="_blank" rel="external">Coursera</a> 丰富的在线课程，大学讲师亲授，全部免费</li>
<li>Youtube 频道<ul>
<li><a href="http://www.youtube.com/user/gotreehouse" target="_blank" rel="external">Treehouse</a></li>
<li><a href="https://www.youtube.com/user/learncodeacademy" target="_blank" rel="external">Learncode.Academy</a></li>
</ul>
</li>
</ul>
<h2 id="在线编程"><a href="#在线编程" class="headerlink" title="在线编程"></a>在线编程</h2><ul>
<li><a href="http://www.codecademy.com/" target="_blank" rel="external">Code Academy</a> 课程关键词：HTML &amp; CSS, JavaScript, PHP, Python, Ruby, Angularjs, The Command Line, 等等</li>
<li><a href="http://www.freecodecamp.com" target="_blank" rel="external">FreeCodeCamp</a> 课程关键词：HTML, CSS, JavaScript, Databases, DevTools, Node.js, 和 Angular.js（译者按：还有很多诸如React, D3, 机器学习等课程正在规划中）</li>
</ul>
<h3 id="算法相关"><a href="#算法相关" class="headerlink" title="算法相关"></a>算法相关</h3><ul>
<li><a href="https://coderbyte.com/" target="_blank" rel="external">Coder Byte</a> 不仅可以练习算法，还有视频学习。涵盖 JS、Node、mongoddb 等内容。</li>
<li><a href="www.freecodecamp.com">FreeCodeCamp</a></li>
<li><a href="http://www.spoj.com/" target="_blank" rel="external">Sphere Online Judge</a> 支持JS解题</li>
<li><a href="https://www.hackerrank.com/" target="_blank" rel="external">Hacker Rank</a> 263个挑战，16个类别。支持JS解题。</li>
<li><a href="http://www.coderchef.com/" target="_blank" rel="external">Code Chef</a> 有在线比赛</li>
<li><a href="http://www.topcoder.com/" target="_blank" rel="external">Top Coder</a> 有比赛和奖金</li>
</ul>
<h2 id="编程游戏"><a href="#编程游戏" class="headerlink" title="编程游戏"></a>编程游戏</h2><ul>
<li><a href="https://www.codewars.com/" target="_blank" rel="external">CodeWars</a> 课程关键词：CoffeeScript, JavaScript, Python, Ruby, Java, Clojure, 和 Haskell</li>
</ul>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li><a href="https://github.com/alivebao/clean-code-js/blob/master/README.md" target="_blank" rel="external">JavaScript 风格指南</a>     译自《代码整洁之道》</li>
</ul>
<h2 id="机器学习与JS"><a href="#机器学习与JS" class="headerlink" title="机器学习与JS"></a>机器学习与JS</h2><ul>
<li><a href="http://burakkanber.com/blog/modeling-physics-in-javascript-introduction/" target="_blank" rel="external">Modeling Physics in Javascript</a> 算法介绍</li>
<li><a href="https://zhuanlan.zhihu.com/p/26709518" target="_blank" rel="external">10 个基于 JavaScript 的机器学习实例</a></li>
</ul>
<h2 id="框架语言"><a href="#框架语言" class="headerlink" title="框架语言"></a>框架语言</h2><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><ul>
<li><a href="https://juejin.im/post/59278e312f301e006c2e1510" target="_blank" rel="external">JavaScript深入系列15篇</a> 掘金好文</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a> 汤姆大叔的博客</li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#object" target="_blank" rel="external">JavaScript 秘密花园</a> 在线电子书</li>
</ul>
<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ul>
<li><a href="https://discountry.github.io/react/" target="_blank" rel="external">react 中文官方文档</a>：余博伦组织翻译小组贡献</li>
</ul>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ul>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a> 编写 jQuery 插件</li>
</ul>
<h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/24575395" target="_blank" rel="external">2016-我的前端之路:工具化与工程化</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 资源 </category>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web资源 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[注册登录验证二三事]]></title>
      <url>/posts/7069f0f9/</url>
      <content type="html"><![CDATA[<p>登陆授权的原理理解及通过<code>node.js</code>,<code>mongodb</code>, <code>express</code>实现注册登陆功能案例实现。</p>
<a id="more"></a>
<h2 id="鉴权与授权"><a href="#鉴权与授权" class="headerlink" title="鉴权与授权"></a>鉴权与授权</h2><p>鉴权：向用户发起质询（Challenge），完成身份验证工作。（典型的鉴权也就是要求用户输入并比对用户名和密码的过程）</p>
<p>授权：而授权则是确保会话Cookie存在。</p>
<h3 id="鉴权方式"><a href="#鉴权方式" class="headerlink" title="鉴权方式"></a>鉴权方式</h3><p>传统的用户名密码对、客户端证书，有第三方登录、手机验证，以及新兴的扫码和指纹等方式。</p>
<h3 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h3><p>在单一的传统Web应用中，授权的过程通常由会话Cookie来完成。</p>
<p>而在浏览器之外，例如在Web API调用、移动应用和富 Web 应用等场景中，需要借助令牌技术。</p>
<p>一些概念：</p>
<ul>
<li>令牌： 指的是在用户通过身份验证之后，为用户分配的一个临时凭证。在系统内部，各个子系统只需要以统一的方式正确识别和处理这个凭证即可完成对用户的访问和操作进行授权。令牌在广为使用的OAuth技术中被采用来完成授权的过程。</li>
<li>OAuth：OAuth是一种开放的授权模型，它规定了一种供资源拥有方与消费方之间简单又直观的交互方法，即从消费方向资源拥有方发起使用AccessToken（访问令牌）签名的HTTP请求。</li>
</ul>
<h2 id="Basic-和-Digest-鉴权-（风险高）"><a href="#Basic-和-Digest-鉴权-（风险高）" class="headerlink" title="Basic 和 Digest 鉴权 （风险高）"></a>Basic 和 Digest 鉴权 （风险高）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Basic和Digest是通过在HTTP请求中直接包含用户名和密码，或者它们的哈希值来向服务器传输用户凭据的方法。</p>
<ul>
<li>Basic鉴权直接在每个请求的头部或URL中包含<strong>明文</strong>的用户名或密码，或者经过Base64编码过的用户名或密码；</li>
<li>Digest则会使用服务器返回的<strong>随机值</strong>，对用户名和密码拼装后，使用<strong>多次MD5哈希处理</strong>后再向服务器传输。服务器在处理每个请求之前，读取收到的凭据，并鉴定用户的身份。</li>
</ul>
<h3 id="basic-和-digest-认证流程"><a href="#basic-和-digest-认证流程" class="headerlink" title="basic 和 digest 认证流程"></a>basic 和 digest 认证流程</h3><p><img src="http://pic002.cnblogs.com/images/2012/322405/2012121109092944.png" alt="basic 和 digest 认证流程"></p>
<p>二者流程类似，只是 challenge 和算法不同。 <code>basic</code>是 base64 编码； <code>dugest</code> 是 MD5 编码。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>它们需要在请求中提供凭据，因此提供“记住登录状态”功能的网站中，不得不将用户凭据缓存在浏览器中，安全风险高。</p>
<p><code>Digest</code>鉴权，让服务器无法在存储密码前对其进行不可逆的加密。</p>
<h2 id="web-应用实践模式（传统）"><a href="#web-应用实践模式（传统）" class="headerlink" title="web 应用实践模式（传统）"></a>web 应用实践模式（传统）</h2><p>因此，互联网Web应用开发已经形成了一个基本的实践模式，能够在服务端对密码强加密之后存储，并且尽量减少鉴权过程中对凭据的传输。其过程如下图所示：</p>
<p><img src="http://insights.thoughtworkers.org/wp-content/uploads/2016/12/3-traditional-cookie.jpg" alt=""></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>专门发送一个鉴权请求，只在这个请求头中包含原始用户名和密码凭据，</li>
<li>经服务器验证合法之后，由服务器发给一个会话标识（Session ID），</li>
<li>客户端将会话标识存储在 Cookie 中，服务器记录会话标识与经过验证的用户的对应关系；</li>
<li>后续客户端使用会话标识、而不是原始凭据去与服务器交互；</li>
<li>服务器读取到会话标识后从自身的会话存储中读取已在第一个鉴权请求中验证过的用户身份。为了保护用户的原始凭据在传输中的安全，只需要为第一个鉴权请求构建安全连接支持。</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>最明显的问题可能是对服务器会话存储的依赖，服务器程序的会话存储往往在服务器程序重启之后丢失，因此可能会导致用户突然被登出的情况。</p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ol>
<li>用自包含的、含有加密内容的 Cookie 作为替代凭据。</li>
<li>用面向切面的模式对身份验证的过程进行封装。</li>
<li>单点登录 =&gt; 引入独立的鉴权子站点。</li>
</ol>
<h2 id="node-js-的调试"><a href="#node-js-的调试" class="headerlink" title="node.js 的调试"></a>node.js 的调试</h2><ol>
<li><a href="http://welefen.com/post/debug-thinkjs-2015-project-in-vscode.html" target="_blank" rel="external">在 VS Code 下断点调试</a></li>
<li><a href="http://welefen.com/post/use-node-inspector-debug-thinkjs-es2015-project.html" target="_blank" rel="external">利用 <code>node-inspector</code> 调试</a></li>
<li><a href="http://welefen.com/post/debug-thinkjs-es2015-project-in-webstorm.html" target="_blank" rel="external">在 WebStorm 下断点调试</a></li>
</ol>
<h2 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h2><p><a href="http://www.zhanxin.info/nodejs/2013-10-16-simple-authentication-in-nodejs.html" target="_blank" rel="external">用NodeJS完成简单的身份验证</a>  (<a href="https://github.com/DanialK/Simple-Authentication" target="_blank" rel="external">github代码</a>)</p>
<p><a href="http://www.zhanxin.info/nodejs/2013-10-17-authentication-using-passportjs.html" target="_blank" rel="external">用PassportJS实现多账号登录</a>  (<a href="https://github.com/DanialK/PassportJS-Authentication" target="_blank" rel="external">github代码</a>)</p>
<p><a href="http://www.cnblogs.com/y-yxh/p/5859937.html" target="_blank" rel="external">nodeJS—express4+passport实现用户注册登录验证</a></p>
<p><a href="https://segmentfault.com/a/1190000009470011#articleHeader9" target="_blank" rel="external">基于node的登入例子（node-koa-mo</a> (<a href="https://github.com/linwalker/node-login" target="_blank" rel="external">github代码</a>)</p>
<p><a href="http://www.cnblogs.com/imwtr/p/4360341.html" target="_blank" rel="external">Node.js基于Express框架搭建一个简单的注册登录Web功能</a>  (<a href="https://github.com/imwtr/nodejs_express_login_register" target="_blank" rel="external">    github代码</a>)</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a href="https://cnodejs.org/topic/572021b2fa48138c41110e4f" target="_blank" rel="external">nodejs邮件发送就是这么简单</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<ol>
<li><a href="http://insights.thoughtworkers.org/traditional-web-app-authentication/" target="_blank" rel="external">登录工程：传统 Web 应用中的身份验证技术</a></li>
<li><a href="http://insights.thoughtworkers.org/web-app-authentication/" target="_blank" rel="external">登录工程：现代Web应用中的身份验证技术</a></li>
<li><a href="http://insights.thoughtworkers.org/project-of-login/" target="_blank" rel="external">登录工程：现代 Web 应用的典型身份验证需求</a></li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> node.js </category>
            
            <category> 注册登录 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 注册登录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>/posts/364ea8cc/</url>
      <content type="html"><![CDATA[<p>JS 设计模式基本概念了解。</p>
<a id="more"></a>
<h2 id="UML-类图-与-时序图"><a href="#UML-类图-与-时序图" class="headerlink" title="UML 类图 与 时序图"></a>UML 类图 与 时序图</h2><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><h4 id="泛化关系-generalization："><a href="#泛化关系-generalization：" class="headerlink" title="泛化关系 generalization："></a>泛化关系 generalization：</h4><p>空心箭头实线表示。<br>如： 汽车与 SUV</p>
<h4 id="实现关系-realize"><a href="#实现关系-realize" class="headerlink" title="实现关系 realize"></a>实现关系 realize</h4><p>空心箭头虚线表示。<br>如： 车与自行车</p>
<h4 id="聚合关系-aggregation"><a href="#聚合关系-aggregation" class="headerlink" title="聚合关系 aggregation"></a>聚合关系 aggregation</h4><p>空心菱形实线表示。<br>如： 部门与员工。<br>整体和部分非强依赖。</p>
<h4 id="组合关系-composition"><a href="#组合关系-composition" class="headerlink" title="组合关系 composition"></a>组合关系 composition</h4><p>实心菱形实线表示。<br>如： 公司与部门。<br>整体和部分强依赖。</p>
<h4 id="关联关系-association"><a href="#关联关系-association" class="headerlink" title="关联关系 association"></a>关联关系 association</h4><p>实心直线表示。<br>“强关联”关系。是一种静态关系，通常与运行状态无关。</p>
<h4 id="依赖关系-dependency"><a href="#依赖关系-dependency" class="headerlink" title="依赖关系 dependency"></a>依赖关系 dependency</h4><p>带箭头虚线表示。<br>临时性，有方向（单向）。</p>
<h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>为了展示对象之间的交互细节。<br><a href="http://smartlife.blog.51cto.com/1146871/284874" target="_blank" rel="external">详细介绍</a></p>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p>
<h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>
<h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。（子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法）</p>
<p><strong>里氏代换原则是实现开闭原则的重要方式之一</strong>。</p>
<h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>依赖倒转原则(Dependency Inversion  Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p>
<p>在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过<em>依赖注入</em>(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式有三种，分别是：<strong>构造注入，设值注入（Setter注入）和接口注入</strong>。</p>
<p>在大多数情况下，这三个设计原则会同时出现，开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段。</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>接口隔离原则(Interface  Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p>
<h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则(Composite Reuse Principle, CRP)：尽量使用对象组合，而不是继承来达到复用的目的。</p>
<h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。</p>
<p>迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。</p>
<p><a href="http://blog.csdn.net/lovelion/article/details/7563445" target="_blank" rel="external">更多</a></p>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>抽象类，分离对象的创建于使用。符合单一职责原则，隐藏创建细节。</p>
<h3 id="简单工厂模式（4-star"><a href="#简单工厂模式（4-star" class="headerlink" title="简单工厂模式（4 star)"></a>简单工厂模式（4 star)</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</p>
<h4 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h4><ul>
<li>Factory：工厂角色；工厂角色负责实现创建所有实例的内部逻辑</li>
<li>Product：抽象产品角色  ；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</li>
<li>ConcreteProduct：具体产品角色； 具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
</ul>
<p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/SimpleFactory.jpg" alt="模式结构"></p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>优点： 单一职责； 减少使用者记忆量； 通过引入配置文件，提高灵活性。</li>
<li>缺点： 集中了所有创建逻辑，复杂度较高，不利于扩展和维护； 无法形成基于继承的等级结构； 不符合开闭原则。</li>
</ul>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Factory =&gt; BallShop </span></div><div class="line"><span class="keyword">var</span> BallShop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Football、Basketball 和 OtherBalls =&gt; Product</span></div><div class="line">BallShop.prototype = &#123;</div><div class="line">	<span class="attr">playBall</span>: <span class="function"><span class="keyword">function</span>(<span class="params">model</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> ball = <span class="literal">null</span>;</div><div class="line">		swich(model) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="string">'football'</span>:</div><div class="line">				ball = <span class="keyword">new</span> Football();</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="string">'basketball'</span>:</div><div class="line">				ball = <span class="keyword">new</span> Basketball();</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				ball = <span class="keyword">new</span> OtherBalls();</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">return</span> ball;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// myBall =&gt; ConcreteProduct</span></div><div class="line"><span class="keyword">var</span> myBallShop = <span class="keyword">new</span> BallShop();</div><div class="line"><span class="keyword">var</span> myBall = myBallShop.playBall(<span class="string">'football'</span>);</div></pre></td></tr></table></figure>
<h3 id="工厂方法模式（5-star"><a href="#工厂方法模式（5-star" class="headerlink" title="工厂方法模式（5 star)"></a>工厂方法模式（5 star)</h3><p>在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的产品对象，而是针对不同的产品提供不同的工厂，系统提供一个与产品等级结构对应的工厂等级结构。</p>
<h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>工厂方法模式(Factory Method Pattern)定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。</p>
<p>工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)或多态工厂模式(Polymorphic Factory Pattern)。工厂方法模式是一种类创建型模式。</p>
<h4 id="模式结构-1"><a href="#模式结构-1" class="headerlink" title="模式结构"></a>模式结构</h4><ul>
<li>Product：抽象产品</li>
<li>ConcreteProduct：具体产品</li>
<li>Factory：抽象工厂</li>
<li>ConcreteFactory：具体工厂</li>
</ul>
<p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/FactoryMethod.jpg" alt="结构"></p>
<h3 id="抽象工厂模式（5-star"><a href="#抽象工厂模式（5-star" class="headerlink" title="抽象工厂模式（5 star)"></a>抽象工厂模式（5 star)</h3><h3 id="构造者模式-2-star"><a href="#构造者模式-2-star" class="headerlink" title="构造者模式 (2 star)"></a>构造者模式 (2 star)</h3><h3 id="原型模式-3-star"><a href="#原型模式-3-star" class="headerlink" title="原型模式 (3 star)"></a>原型模式 (3 star)</h3><h3 id="单例模式-4-star"><a href="#单例模式-4-star" class="headerlink" title="单例模式 (4 star)"></a>单例模式 (4 star)</h3><blockquote>
<p>参考资料：<a href="http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="external">图说设计模式</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[array-数组方法(2)]]></title>
      <url>/posts/71420832/</url>
      <content type="html"><![CDATA[<p>深入理解 forEach()，map()；slice()，splice() 四种方法的使用。</p>
<a id="more"></a>
<h2 id="1-forEach-——-遍历"><a href="#1-forEach-——-遍历" class="headerlink" title="1.forEach —— 遍历"></a>1.forEach —— 遍历</h2><p>forEach遍历数组，对原来的数据操作，改变原数组</p>
<p>函数声明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].forEach( <span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123; </div><div class="line">    <span class="comment">//… </span></div><div class="line">&#125;, [thisArg] );</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>forEach方法中第一个参数是回调函数，它支持3个参数：</p>
<ul>
<li>第1个是遍历的数组内容</li>
<li>第2个是对应索引</li>
<li>第3个是数组自身</li>
</ul>
<p><strong>注意</strong>：对比jQuery中的<code>$.each</code>方法，参数位置有变化(第1个参数和第2个刚好相反)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.each([], <span class="function"><span class="keyword">function</span>(<span class="params">index, value, array</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>eg1:打印输出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">4</span>].forEach(<span class="built_in">console</span>.log);</div><div class="line"><span class="comment">// 1, 0, [1, 2, 3, 4]</span></div><div class="line"><span class="comment">// 2, 1, [1, 2, 3, 4]</span></div><div class="line"><span class="comment">// 3, 2, [1, 2, 3, 4]</span></div><div class="line"><span class="comment">// 4, 3, [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<p>eg2:数组求和</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</div><div class="line">  sum += item;      <span class="comment">//注：(array[index] == item)为 true</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p>第二个参数thisArg可选，可用于以改变回调函数里面的this指针 ：如果这第2个可选参数不指定，则使用全局对象代替（在浏览器是为window），严格模式下甚至是undefined.</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>映射，创建新数组。函数声明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].map( <span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</div><div class="line">    <span class="comment">//… </span></div><div class="line">&#125;, [thisArg] );</div></pre></td></tr></table></figure>
<p>类似于forEach，但需要注意的是：<strong>回调函数需要有return值，否则新数组都是undefined</strong></p>
<p>eg1：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//求平方值</span></div><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> arrayOfSquares = data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> item * item;       <span class="comment">//必须要有return</span></div><div class="line">&#125;);</div><div class="line">alert(arrayOfSquares); <span class="comment">// 1, 4, 9, 16</span></div></pre></td></tr></table></figure></p>
<p>eg2：可以利用map方法方便获得对象数组中的特定属性值们<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> users = [</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">"张含韵"</span>, <span class="string">"email"</span>: <span class="string">"zhang@email.com"</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">"江一燕"</span>,   <span class="string">"email"</span>: <span class="string">"jiang@email.com"</span>&#125;,</div><div class="line">  &#123;<span class="attr">name</span>: <span class="string">"李小璐"</span>,  <span class="string">"email"</span>: <span class="string">"li@email.com"</span>&#125;</div><div class="line">];</div><div class="line"><span class="keyword">var</span> emails = users.map(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123; <span class="keyword">return</span> user.email; &#125;);</div><div class="line"><span class="built_in">console</span>.log(emails.join(<span class="string">", "</span>)); <span class="comment">// zhang@email.com, jiang@email.com, li@email.com</span></div></pre></td></tr></table></figure></p>
<h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>map能做的事forEach都能做，map可以视为forEach的一个特例，专门用于“通过现有的数组建立新数组”。在没有map之前是通过forEach来创建新数组。需要预先定义空数组，再通过push操作添加元素。有map之后，更进一步优化代码了。</p>
<h2 id="for循环优点"><a href="#for循环优点" class="headerlink" title="for循环优点"></a>for循环优点</h2><ul>
<li>可随意跳出或退出循环</li>
<li>for 循环还可以隔几个去取值</li>
</ul>
<h2 id="1-array-slice"><a href="#1-array-slice" class="headerlink" title="1.array.slice"></a>1.<code>array.slice</code></h2><p>语法：<code>arr.slice([begin[,end]])</code></p>
<p>作用：从已有的数组中返回选定的元素。主要用于复制，可传入1或2个参数。</p>
<ul>
<li>返回值： 新数组</li>
<li>是否改变原数组： 否</li>
<li>是否为浅拷贝： 是</li>
<li>参数传递个数：<ul>
<li>0 —— 浅拷贝得到一个新数组（用于复制）</li>
<li>1 —— 复制从该位置到数组末尾的数组项</li>
<li>2 —— 复制从第一个参数到第二个参数为止的数组项，不包括最后一项</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr1.slice();    <span class="comment">//不传参，arr2为arr1的浅拷贝 arr2：[0,1,2,3]</span></div><div class="line"><span class="keyword">var</span> arr3 = arr1.slice(<span class="number">1</span>);   <span class="comment">//只传1个参数  arr3:[1,2,3]</span></div><div class="line"><span class="keyword">var</span> arr4 = arr1.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">//传2个参数，复制arr1[1]到arr1[3]之间的的数组项，但不包括arr1[3]。arr3:[1,2]</span></div></pre></td></tr></table></figure>
<h2 id="2-array-splice"><a href="#2-array-splice" class="headerlink" title="2.array.splice"></a>2.<code>array.splice</code></h2><p>语法：<code>arr.splice(start, deleteCount[, item1[, item2[, ...]]])</code></p>
<p>作用： 插入、删除或替换数组的元素。该方法可删除从start处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换哪些被删除的元素</p>
<ul>
<li>返回值： 被删除的元素组成的数组</li>
<li>是否改变原数组：是</li>
<li>是否为浅拷贝: 是</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="comment">//只删除</span></div><div class="line"><span class="keyword">var</span> delElement1 = arr1.splice(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//删除arr1中从arr1[1]开始的两个元素</span></div><div class="line"><span class="built_in">console</span>.log(delElement1);    <span class="comment">//[1,2];delElement1.length = 2</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[0,3]</span></div><div class="line"></div><div class="line"><span class="comment">//只增加</span></div><div class="line"><span class="keyword">var</span> delElement2 = arr1.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">//从arr1[1]开始删除0个元素，并在此位置新增4,5两个元素</span></div><div class="line"><span class="built_in">console</span>.log(delElement2);    <span class="comment">//[]；delElement2.length = 0</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[0,4,5,3]</span></div><div class="line"></div><div class="line"><span class="comment">//只替换</span></div><div class="line"><span class="keyword">var</span> delElement3 = arr1.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//从arr1[1]开始删除2个元素，并在此位置新增1,2两个元素（删除2个再新增2个，即替换）</span></div><div class="line"><span class="built_in">console</span>.log(delElement3);    <span class="comment">//[4,5]；delElement3.length = 2</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[0,1,2,3]</span></div><div class="line"></div><div class="line"><span class="comment">//浅拷贝</span></div><div class="line"><span class="keyword">var</span> arrTemp = [<span class="string">"a"</span>,<span class="string">"b"</span>]</div><div class="line"><span class="keyword">var</span> delEle = arr1.splice(<span class="number">1</span>,<span class="number">0</span>,arrTemp);  <span class="comment">//[];delEle.length = 0</span></div><div class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[0, ["a","b"], 1, 2, 3]</span></div><div class="line">arrTemp.push(<span class="string">"c"</span>);      <span class="comment">//arrTemp:  ["a","b","c"]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[0, ["a","b","c"], 1, 2, 3]</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[array-数组方法(1)]]></title>
      <url>/posts/5a6f5bf1/</url>
      <content type="html"><![CDATA[<p>分析对比数组方法 <code>concat()</code>,<code>push()</code>,<code>shift()</code> 与 <code>pop()</code> 的使用。</p>
<a id="more"></a>
<h2 id="1-array-concat"><a href="#1-array-concat" class="headerlink" title="1. array.concat"></a>1. <code>array.concat</code></h2><p>语法： <code>var newArray = oldArray.concat(value1[, value2[, ...[, valueN]]])</code> </p>
<p>作用：将别的一个或多个数组与原数组相连接</p>
<ul>
<li>返回值： 新数组。（不改变原数组内容）</li>
<li>是否改变原数组： 否</li>
<li>是否浅拷贝： 是</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);   </div><div class="line"><span class="built_in">console</span>.log(arr3)；    <span class="comment">//[0,1,2,"a","b","c"]，原数组arr1不受影响</span></div></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>a. 不同于<code>push</code>，<code>concat</code>多个数组时，只返回一维数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//比较:push()与concat()</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr4 = arr1.concat(<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr4);      <span class="comment">// [0,1,2,3,4,5]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr5 = arr1.concat(<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]);</div><div class="line"><span class="built_in">console</span>.log(arr5);      <span class="comment">// 5 push操作返回值是新数组length</span></div><div class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[0,1,2,3,[4,5]]   arr1发生改变</span></div></pre></td></tr></table></figure>
<p>b. shandow copy ：浅拷贝</p>
<blockquote>
<p>浅拷贝，只是对指针的拷贝，拷贝后两个指针指向同一个内存空间，深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>]];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr3 = arr1.concat(<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],arr2);</div><div class="line"><span class="built_in">console</span>.log(arr3);  <span class="comment">// [0, 1, 2, 3, 4, 5, 6, [7,8]]</span></div><div class="line"></div><div class="line"><span class="comment">//改变arr2[1]的值后，arr3会随之改变</span></div><div class="line">arr2[<span class="number">1</span>].push(<span class="number">9</span>);    <span class="comment">// arr2:[6,[7,8,9]]</span></div><div class="line"><span class="built_in">console</span>.log(arr3);  <span class="comment">// arr3:[0, 1, 2, 3, 4, 5, 6, [7,8,9]]</span></div><div class="line"></div><div class="line"><span class="comment">//同理：改变arr3[arr3.length-1]的值后，arr2也会随之改变</span></div><div class="line">arr3[arr3.length<span class="number">-1</span>][<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">// arr3:[0, 1, 2, 3, 4, 5, 6, [10,8,9]]</span></div><div class="line"><span class="built_in">console</span>.log(arr2);      <span class="comment">//arr2: [6,[10,8,9]]</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="2-array-push"><a href="#2-array-push" class="headerlink" title="2.array.push"></a>2.<code>array.push</code></h2><p>语法： <code>arr.push(element1, ..., elementN)</code></p>
<p>作用：在原数组末尾添加元素或数组</p>
<ul>
<li>返回值： 新数组length值</li>
<li>是否改变原数组：是</li>
<li>是否浅拷贝： 是</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newLen_1 = arr1.push(arr2);    <span class="comment">//4</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[0,1,2,[3,4]] </span></div><div class="line"></div><div class="line"><span class="comment">//改变arr2，arr1会发生改变</span></div><div class="line">arr2.push(<span class="number">5</span>);   <span class="comment">//arr2:[3,4,5]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//arr1:[0,1,2,[3,4,5]]</span></div></pre></td></tr></table></figure>
<h2 id="3-array-pop"><a href="#3-array-pop" class="headerlink" title="3.array.pop"></a>3.<code>array.pop</code></h2><p>语法： <code>arr.pop()</code></p>
<p>作用： 删除数组最末尾的元素</p>
<ul>
<li>返回值： 删除的元素</li>
<li>是否改变原数组： 是 </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> poped = arr1.pop();   </div><div class="line"><span class="built_in">console</span>.log(poped);  <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[0,1]</span></div></pre></td></tr></table></figure>
<h2 id="4-array-unshift"><a href="#4-array-unshift" class="headerlink" title="4.array.unshift"></a>4.<code>array.unshift</code></h2><p>语法：<code>arr.unshift([element1[, ...[, elementN]]])</code></p>
<p>作用： 在数组最开始位置添加元素（跟<code>push()</code>刚好相反）</p>
<ul>
<li>返回值 ：新数组长度</li>
<li>是否改变原数组： 是</li>
<li>是否浅拷贝： 是</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newLen_1 = arr1.unshift(arr2);    <span class="comment">//4</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[[3,4]，0,1,2] </span></div><div class="line"></div><div class="line"><span class="comment">//改变arr2，arr1会发生改变</span></div><div class="line">arr2.unshift(<span class="number">5</span>);   <span class="comment">//arr2:[5,3,4]</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//arr1:[[5,3,4],0,1,2]</span></div></pre></td></tr></table></figure>
<h2 id="5-array-shift"><a href="#5-array-shift" class="headerlink" title="5.array.shift"></a>5.<code>array.shift</code></h2><p>语法：<code>arr.shift()</code></p>
<p>作用：删除数组第一个元素（同<code>pop()</code>刚好相反）</p>
<ul>
<li>返回值： 删除的元素</li>
<li>是否改变原数组： 是 </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> poped = arr1.shift();   </div><div class="line"><span class="built_in">console</span>.log(poped);  <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(arr1);  <span class="comment">//[1,2]</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[array-数组去重]]></title>
      <url>/posts/273a4fc5/</url>
      <content type="html"><![CDATA[<p>数组去重：部分方法来自于网上看到的优秀代码，加了自己的理解和补充。</p>
<a id="more"></a>
<h2 id="用for循环删除后面重复的"><a href="#用for循环删除后面重复的" class="headerlink" title="用for循环删除后面重复的"></a>用for循环删除后面重复的</h2><p>注解：通用方法，兼容性好，但性能一般，不推荐。循环次数过多。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueFor</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        item = arr[i];</div><div class="line">        <span class="comment">// 每取一个item，就对它后面的所有元素进行遍历，将后面与之重复的元素都删掉</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (item === arr[j]) &#123;</div><div class="line">            <span class="comment">// array.splice 方法改变原数组</span></div><div class="line">                arr.splice(j,<span class="number">1</span>);        </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line">uniqueFor([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]); <span class="comment">//[1,3,2]</span></div></pre></td></tr></table></figure>
<h2 id="利用array-filter方法过滤重复项"><a href="#利用array-filter方法过滤重复项" class="headerlink" title="利用array.filter方法过滤重复项"></a>利用<code>array.filter</code>方法过滤重复项</h2><p>注解：较推荐此方法（但不兼容ie浏览器）。代码非常优雅简洁，需要对数组的<code>filter()</code>方法与<code>indexOf()</code>都比较熟练。<br>用到的方法：<code>indexOf()</code>、<code>filter()</code><br><strong><code>array.indexOf</code></strong>语法： <code>arr.indexOf(searchElement[, fromIndex = 0])</code></p>
<ul>
<li><code>searchElement</code>:要查找的元素</li>
<li><code>fromIndex</code>：可选参数。表示开始查找的位置、</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueFilter</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="comment">//对数组arr进行filter操作，筛选，ele是arr中元素，pos是ele元素对应的索引，array是被遍历的arr本身</span></div><div class="line">    <span class="keyword">return</span> arr.filter (<span class="function"><span class="keyword">function</span>(<span class="params">ele, pos, array</span>)</span>&#123;</div><div class="line">        <span class="comment">//返回true则表示保留该元素，false则不保留</span></div><div class="line">        <span class="keyword">return</span> array.indexOf(ele,pos + <span class="number">1</span>) === <span class="number">-1</span>;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">uniqueFilter([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]);</div></pre></td></tr></table></figure>
<hr>
<h3 id="indexof"><a href="#indexof" class="headerlink" title="indexof()"></a>indexof()</h3><p>深入理解<code>indexOf(ele, pos + 1)=== -1</code></p>
<p>在下面的<code>uniqueFilter()</code>函数中，要查找的是索引为pos的元素<code>ele</code>，且从索引为<code>pos + 1</code>的位置开始查找(即：查找ele后面的所有元素)，</p>
<ul>
<li>若<code>indexOf(ele, pos + 1)</code>返回的值为1，则说明在ele后面还有与其值相同的元素； 故<code>indexOf(ele, pos + 1) === -1</code>返回<code>false</code>；故由<code>filter()</code>方法可知：返回false的值不再保留。由此可对arr进行去重</li>
<li>同理：若<code>indexOf(ele, pos + 1)</code>返回的值为-1，则<code>indexOf(ele, pos + 1) === -1</code>返回<code>true</code>；则经<code>filter()</code>方法后，该元素在arr中保留并作为返回值返回，表示该ele在arr中唯一</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].indexOf(<span class="number">5</span>,<span class="number">1</span>);    <span class="comment">//表示从数组的第二项开始查找，显然，返回的值为1；</span></div><div class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].indexOf(<span class="number">5</span>,<span class="number">2</span>);    <span class="comment">//表示从数组的第三项开始查找，显然，返回的值为-1；</span></div><div class="line"><span class="comment">//因此，我们可以得到：</span></div><div class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].indexOf(<span class="number">5</span>,<span class="number">1</span>) === <span class="number">-1</span>;    <span class="comment">//返回值为false</span></div><div class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].indexOf(<span class="number">5</span>,<span class="number">2</span>) === <span class="number">-1</span>;    <span class="comment">//返回的值true；</span></div></pre></td></tr></table></figure>
<h2 id="根据对象属性的唯一性"><a href="#根据对象属性的唯一性" class="headerlink" title="根据对象属性的唯一性"></a>根据对象属性的唯一性</h2><p>由于对象的key永远是唯一的，不会有重复。故可将arr[i]的值作为obj的key，对象中的所有key即为arr元素去重后的结果</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueObj</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> outputArr = [],</div><div class="line">        obj = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> item;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">        item = arr[i];</div><div class="line">        <span class="keyword">if</span> (obj[item])&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outputArr.push(item);</div><div class="line">            obj[item] = <span class="literal">true</span>;   <span class="comment">//push之后一定要记得给obj[item]赋值</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> outputArr;</div><div class="line">&#125;</div><div class="line">uniqueObj([<span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>]);  <span class="comment">//[5, 8, 130, 44]</span></div></pre></td></tr></table></figure>
<p>注解：此方法我认为最机智。利用key值得唯一性，既容易让人理解又很高效。唯一需要注意的是不要忘了<code>push</code>操作之后给<code>obj[item]</code>赋值。</p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> 数组 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> array </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
